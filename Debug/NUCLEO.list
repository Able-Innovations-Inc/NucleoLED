
NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800487c  0800487c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004884  08004884  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800488c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e28  2000000c  08004898  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e34  08004898  00020e34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aecc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000191c  00000000  00000000  0002af08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0002c828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  0002d450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000154d2  00000000  00000000  0002dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000826d  00000000  00000000  00043482  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008815c  00000000  00000000  0004b6ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d384b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003324  00000000  00000000  000d38c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004844 	.word	0x08004844

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004844 	.word	0x08004844

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_UART_TxCpltCallback>:
static void MX_USART1_UART_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <HAL_UART_TxCpltCallback+0x24>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d102      	bne.n	80004ec <HAL_UART_TxCpltCallback+0x18>
	{
		UART1_Transmitted = 1;
 80004e6:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_UART_TxCpltCallback+0x28>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	601a      	str	r2, [r3, #0]
	}
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40011000 	.word	0x40011000
 80004fc:	20000d9c 	.word	0x20000d9c

08000500 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <HAL_UART_RxCpltCallback+0x24>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d102      	bne.n	8000518 <HAL_UART_RxCpltCallback+0x18>
	{
		UART1_Received = 1;
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_UART_RxCpltCallback+0x28>)
 8000514:	2201      	movs	r2, #1
 8000516:	601a      	str	r2, [r3, #0]
	}
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40011000 	.word	0x40011000
 8000528:	200001b0 	.word	0x200001b0

0800052c <HAL_GPIO_EXTI_Callback>:

uint8_t LED_Data[MAX_LED][4];
uint16_t pwmData[(24*MAX_LED)+RESET_LED_DELAY];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800053c:	d106      	bne.n	800054c <HAL_GPIO_EXTI_Callback+0x20>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800053e:	2120      	movs	r1, #32
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <HAL_GPIO_EXTI_Callback+0x28>)
 8000542:	f001 ff84 	bl	800244e <HAL_GPIO_TogglePin>
		changeFlag = 1;
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000548:	2201      	movs	r2, #1
 800054a:	601a      	str	r2, [r3, #0]
	}
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40020000 	.word	0x40020000
 8000558:	20000030 	.word	0x20000030

0800055c <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	603b      	str	r3, [r7, #0]
	if(LEDnum < 0)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2b00      	cmp	r3, #0
 800056e:	da01      	bge.n	8000574 <Set_LED+0x18>
		LEDnum = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
	if(LEDnum > MAX_LED)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b3c      	cmp	r3, #60	; 0x3c
 8000578:	dd01      	ble.n	800057e <Set_LED+0x22>
		LEDnum = MAX_LED;
 800057a:	233c      	movs	r3, #60	; 0x3c
 800057c:	60fb      	str	r3, [r7, #12]
	LED_Data[LEDnum][0] = LEDnum;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	b2d9      	uxtb	r1, r3
 8000582:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <Set_LED+0x6c>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <Set_LED+0x6c>)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	460a      	mov	r2, r1
 8000598:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	b2d9      	uxtb	r1, r3
 800059e:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <Set_LED+0x6c>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	4413      	add	r3, r2
 80005a6:	460a      	mov	r2, r1
 80005a8:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b2d9      	uxtb	r1, r3
 80005ae:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <Set_LED+0x6c>)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	460a      	mov	r2, r1
 80005b8:	70da      	strb	r2, [r3, #3]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200000bc 	.word	0x200000bc

080005cc <WS2812_Send>:

void WS2812_Send (void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	e036      	b.n	800064a <WS2812_Send+0x7e>
	{
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80005dc:	4a2e      	ldr	r2, [pc, #184]	; (8000698 <WS2812_Send+0xcc>)
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	785b      	ldrb	r3, [r3, #1]
 80005e6:	041a      	lsls	r2, r3, #16
 80005e8:	492b      	ldr	r1, [pc, #172]	; (8000698 <WS2812_Send+0xcc>)
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	440b      	add	r3, r1
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	021b      	lsls	r3, r3, #8
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4928      	ldr	r1, [pc, #160]	; (8000698 <WS2812_Send+0xcc>)
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	440b      	add	r3, r1
 80005fe:	78db      	ldrb	r3, [r3, #3]
 8000600:	4313      	orrs	r3, r2
 8000602:	607b      	str	r3, [r7, #4]

		for (int i=23; i>=0; i--)
 8000604:	2317      	movs	r3, #23
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	e019      	b.n	800063e <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 800060a:	2201      	movs	r2, #1
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4013      	ands	r3, r2
 8000618:	2b00      	cmp	r3, #0
 800061a:	d005      	beq.n	8000628 <WS2812_Send+0x5c>
			{
				pwmData[indx] = LEDhigh;  //70	ARR: 105
 800061c:	4a1f      	ldr	r2, [pc, #124]	; (800069c <WS2812_Send+0xd0>)
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	2146      	movs	r1, #70	; 0x46
 8000622:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000626:	e004      	b.n	8000632 <WS2812_Send+0x66>
			}

			else pwmData[indx] = LEDlow;  //35
 8000628:	4a1c      	ldr	r2, [pc, #112]	; (800069c <WS2812_Send+0xd0>)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	2123      	movs	r1, #35	; 0x23
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3301      	adds	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3b01      	subs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	dae2      	bge.n	800060a <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	3301      	adds	r3, #1
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	2b3b      	cmp	r3, #59	; 0x3b
 800064e:	ddc5      	ble.n	80005dc <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<RESET_LED_DELAY; i++)
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	e00a      	b.n	800066c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8000656:	4a11      	ldr	r2, [pc, #68]	; (800069c <WS2812_Send+0xd0>)
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	2100      	movs	r1, #0
 800065c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	3301      	adds	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
	for (int i=0; i<RESET_LED_DELAY; i++)
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	3301      	adds	r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	2b31      	cmp	r3, #49	; 0x31
 8000670:	ddf1      	ble.n	8000656 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <WS2812_Send+0xd0>)
 8000678:	2100      	movs	r1, #0
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <WS2812_Send+0xd4>)
 800067c:	f002 fb82 	bl	8002d84 <HAL_TIM_PWM_Start_DMA>

	while (!datasentflag){};
 8000680:	bf00      	nop
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <WS2812_Send+0xd8>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0fb      	beq.n	8000682 <WS2812_Send+0xb6>
	datasentflag = 0;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <WS2812_Send+0xd8>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000bc 	.word	0x200000bc
 800069c:	200001b4 	.word	0x200001b4
 80006a0:	20000da4 	.word	0x20000da4
 80006a4:	2000002c 	.word	0x2000002c

080006a8 <clearLEDData>:

void clearLEDData()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
	for(int x = 0; x < MAX_LED; x++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	e008      	b.n	80006c6 <clearLEDData+0x1e>
	{
		Set_LED(x, 0, 0, 0);
 80006b4:	2300      	movs	r3, #0
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff ff4e 	bl	800055c <Set_LED>
	for(int x = 0; x < MAX_LED; x++)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3301      	adds	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b3b      	cmp	r3, #59	; 0x3b
 80006ca:	ddf3      	ble.n	80006b4 <clearLEDData+0xc>
	}
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <setAllLED>:

void setAllLED(int red, int green, int blue)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
	for(int x = 0; x < MAX_LED; x++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e008      	b.n	80006f8 <setAllLED+0x24>
	{
		Set_LED(x, red, green, blue);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	68f9      	ldr	r1, [r7, #12]
 80006ec:	6978      	ldr	r0, [r7, #20]
 80006ee:	f7ff ff35 	bl	800055c <Set_LED>
	for(int x = 0; x < MAX_LED; x++)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3301      	adds	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b3b      	cmp	r3, #59	; 0x3b
 80006fc:	ddf3      	ble.n	80006e6 <setAllLED+0x12>
	}
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <blinkLED>:

void blinkLED(int onTime, int offTime, int red, int green, int blue)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	60f8      	str	r0, [r7, #12]
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	603b      	str	r3, [r7, #0]
	setAllLED(red, green, blue);
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	6839      	ldr	r1, [r7, #0]
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ffdb 	bl	80006d4 <setAllLED>
	WS2812_Send();
 800071e:	f7ff ff55 	bl	80005cc <WS2812_Send>
	HAL_Delay(onTime);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4618      	mov	r0, r3
 8000726:	f001 f833 	bl	8001790 <HAL_Delay>
	clearLEDData();
 800072a:	f7ff ffbd 	bl	80006a8 <clearLEDData>
	WS2812_Send();
 800072e:	f7ff ff4d 	bl	80005cc <WS2812_Send>
	HAL_Delay(offTime);
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f82b 	bl	8001790 <HAL_Delay>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <cometLED>:

int head = 0;
int tail = 0;

void cometLED(int delay, int red, int green, int blue, int cometLength)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
 8000750:	603b      	str	r3, [r7, #0]
	head++;
 8000752:	4b36      	ldr	r3, [pc, #216]	; (800082c <cometLED+0xe8>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	4a34      	ldr	r2, [pc, #208]	; (800082c <cometLED+0xe8>)
 800075a:	6013      	str	r3, [r2, #0]
	tail++;
 800075c:	4b34      	ldr	r3, [pc, #208]	; (8000830 <cometLED+0xec>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	4a33      	ldr	r2, [pc, #204]	; (8000830 <cometLED+0xec>)
 8000764:	6013      	str	r3, [r2, #0]
	if(head == MAX_LED)
 8000766:	4b31      	ldr	r3, [pc, #196]	; (800082c <cometLED+0xe8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b3c      	cmp	r3, #60	; 0x3c
 800076c:	d104      	bne.n	8000778 <cometLED+0x34>
		head--;
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <cometLED+0xe8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3b01      	subs	r3, #1
 8000774:	4a2d      	ldr	r2, [pc, #180]	; (800082c <cometLED+0xe8>)
 8000776:	6013      	str	r3, [r2, #0]
	if(tail == MAX_LED)
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <cometLED+0xec>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b3c      	cmp	r3, #60	; 0x3c
 800077e:	d105      	bne.n	800078c <cometLED+0x48>
	{
		head = 0;
 8000780:	4b2a      	ldr	r3, [pc, #168]	; (800082c <cometLED+0xe8>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
		tail = 0;
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <cometLED+0xec>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
	}
	int x = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
	if(head < cometLength)
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <cometLED+0xe8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6a3a      	ldr	r2, [r7, #32]
 8000796:	429a      	cmp	r2, r3
 8000798:	dd1d      	ble.n	80007d6 <cometLED+0x92>
	{
		tail--;
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <cometLED+0xec>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3b01      	subs	r3, #1
 80007a0:	4a23      	ldr	r2, [pc, #140]	; (8000830 <cometLED+0xec>)
 80007a2:	6013      	str	r3, [r2, #0]
		while(x < head)
 80007a4:	e008      	b.n	80007b8 <cometLED+0x74>
		{
			Set_LED(x, red, green, blue);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	68b9      	ldr	r1, [r7, #8]
 80007ac:	6978      	ldr	r0, [r7, #20]
 80007ae:	f7ff fed5 	bl	800055c <Set_LED>
			x++;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
		while(x < head)
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <cometLED+0xe8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	429a      	cmp	r2, r3
 80007c0:	dbf1      	blt.n	80007a6 <cometLED+0x62>
 80007c2:	e017      	b.n	80007f4 <cometLED+0xb0>
	}
	else
	{
		while(x < tail)
		{
			Set_LED(x, 0, 0, 0);
 80007c4:	2300      	movs	r3, #0
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff fec6 	bl	800055c <Set_LED>
			x++;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
		while(x < tail)
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <cometLED+0xec>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dbf1      	blt.n	80007c4 <cometLED+0x80>
		}
	}
	while(x < head)
 80007e0:	e008      	b.n	80007f4 <cometLED+0xb0>
	{
		Set_LED(x, red, green, blue);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	68b9      	ldr	r1, [r7, #8]
 80007e8:	6978      	ldr	r0, [r7, #20]
 80007ea:	f7ff feb7 	bl	800055c <Set_LED>
		x++;
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
	while(x < head)
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <cometLED+0xe8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	dbf1      	blt.n	80007e2 <cometLED+0x9e>
	}
	while(x < MAX_LED)
 80007fe:	e008      	b.n	8000812 <cometLED+0xce>
	{
		Set_LED(x, 0, 0, 0);
 8000800:	2300      	movs	r3, #0
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f7ff fea8 	bl	800055c <Set_LED>
		x++;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
	while(x < MAX_LED)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	2b3b      	cmp	r3, #59	; 0x3b
 8000816:	ddf3      	ble.n	8000800 <cometLED+0xbc>
	}
	WS2812_Send();
 8000818:	f7ff fed8 	bl	80005cc <WS2812_Send>
	HAL_Delay(delay);
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 ffb6 	bl	8001790 <HAL_Delay>
}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000034 	.word	0x20000034
 8000830:	20000038 	.word	0x20000038

08000834 <slideLED>:


int slideHead = 0;
void slideLED(int delay, int red, int green, int blue)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	603b      	str	r3, [r7, #0]
	slideHead++;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <slideLED+0x50>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <slideLED+0x50>)
 800084a:	6013      	str	r3, [r2, #0]
	if(slideHead == MAX_LED)
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <slideLED+0x50>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b3c      	cmp	r3, #60	; 0x3c
 8000852:	d106      	bne.n	8000862 <slideLED+0x2e>
	{
		slideHead = 0;
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <slideLED+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
		clearLEDData();
 800085a:	f7ff ff25 	bl	80006a8 <clearLEDData>
		WS2812_Send();
 800085e:	f7ff feb5 	bl	80005cc <WS2812_Send>
	}
	Set_LED(slideHead, red, green, blue);
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <slideLED+0x50>)
 8000864:	6818      	ldr	r0, [r3, #0]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	68b9      	ldr	r1, [r7, #8]
 800086c:	f7ff fe76 	bl	800055c <Set_LED>
	WS2812_Send();
 8000870:	f7ff feac 	bl	80005cc <WS2812_Send>
	HAL_Delay(delay);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4618      	mov	r0, r3
 8000878:	f000 ff8a 	bl	8001790 <HAL_Delay>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000003c 	.word	0x2000003c

08000888 <glowInitLED>:
int currGreen;
float blueIncrement;
int currBlue;

void glowInitLED(int red, int green, int blue, int red1, int green1, int blue1)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	603b      	str	r3, [r7, #0]
	redIncrement = (red1-red)/100;
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	4a1f      	ldr	r2, [pc, #124]	; (800091c <glowInitLED+0x94>)
 800089e:	fb82 1203 	smull	r1, r2, r2, r3
 80008a2:	1152      	asrs	r2, r2, #5
 80008a4:	17db      	asrs	r3, r3, #31
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <glowInitLED+0x98>)
 80008b2:	edc3 7a00 	vstr	s15, [r3]
	greenIncrement = (green1-green)/100;
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <glowInitLED+0x94>)
 80008be:	fb82 1203 	smull	r1, r2, r2, r3
 80008c2:	1152      	asrs	r2, r2, #5
 80008c4:	17db      	asrs	r3, r3, #31
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <glowInitLED+0x9c>)
 80008d2:	edc3 7a00 	vstr	s15, [r3]
	blueIncrement = (blue1-blue)/100;
 80008d6:	69fa      	ldr	r2, [r7, #28]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	4a0f      	ldr	r2, [pc, #60]	; (800091c <glowInitLED+0x94>)
 80008de:	fb82 1203 	smull	r1, r2, r2, r3
 80008e2:	1152      	asrs	r2, r2, #5
 80008e4:	17db      	asrs	r3, r3, #31
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <glowInitLED+0xa0>)
 80008f2:	edc3 7a00 	vstr	s15, [r3]
	currRed = red;
 80008f6:	4a0d      	ldr	r2, [pc, #52]	; (800092c <glowInitLED+0xa4>)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	6013      	str	r3, [r2, #0]
	currBlue = blue;
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <glowInitLED+0xa8>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
	currGreen = green;
 8000902:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <glowInitLED+0xac>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	6013      	str	r3, [r2, #0]
	dir = 1;
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <glowInitLED+0xb0>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	51eb851f 	.word	0x51eb851f
 8000920:	20000048 	.word	0x20000048
 8000924:	20000da0 	.word	0x20000da0
 8000928:	20000e2c 	.word	0x20000e2c
 800092c:	200000b8 	.word	0x200000b8
 8000930:	200000b0 	.word	0x200000b0
 8000934:	20000de4 	.word	0x20000de4
 8000938:	20000040 	.word	0x20000040

0800093c <glowLED>:

void glowLED(int delay, int red, int green, int blue, int red1, int green1, int blue1)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]
	if(dir == 0)
 800094a:	4b56      	ldr	r3, [pc, #344]	; (8000aa4 <glowLED+0x168>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d148      	bne.n	80009e4 <glowLED+0xa8>
	{
		if((currRed - red) < (2*redIncrement))
 8000952:	4b55      	ldr	r3, [pc, #340]	; (8000aa8 <glowLED+0x16c>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	ee07 3a90 	vmov	s15, r3
 800095e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000962:	4b52      	ldr	r3, [pc, #328]	; (8000aac <glowLED+0x170>)
 8000964:	edd3 7a00 	vldr	s15, [r3]
 8000968:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800096c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000974:	d502      	bpl.n	800097c <glowLED+0x40>
			dir = 1;
 8000976:	4b4b      	ldr	r3, [pc, #300]	; (8000aa4 <glowLED+0x168>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]
		currRed = currRed - redIncrement;
 800097c:	4b4a      	ldr	r3, [pc, #296]	; (8000aa8 <glowLED+0x16c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000988:	4b48      	ldr	r3, [pc, #288]	; (8000aac <glowLED+0x170>)
 800098a:	edd3 7a00 	vldr	s15, [r3]
 800098e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000996:	ee17 2a90 	vmov	r2, s15
 800099a:	4b43      	ldr	r3, [pc, #268]	; (8000aa8 <glowLED+0x16c>)
 800099c:	601a      	str	r2, [r3, #0]
		currGreen = currGreen - greenIncrement;
 800099e:	4b44      	ldr	r3, [pc, #272]	; (8000ab0 <glowLED+0x174>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009aa:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <glowLED+0x178>)
 80009ac:	edd3 7a00 	vldr	s15, [r3]
 80009b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b8:	ee17 2a90 	vmov	r2, s15
 80009bc:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <glowLED+0x174>)
 80009be:	601a      	str	r2, [r3, #0]
		currBlue = currBlue - blueIncrement;
 80009c0:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <glowLED+0x17c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009cc:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <glowLED+0x180>)
 80009ce:	edd3 7a00 	vldr	s15, [r3]
 80009d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009da:	ee17 2a90 	vmov	r2, s15
 80009de:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <glowLED+0x17c>)
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e04b      	b.n	8000a7c <glowLED+0x140>
	}
	else if(dir == 1)
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <glowLED+0x168>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d147      	bne.n	8000a7c <glowLED+0x140>
	{
		if((red1-currRed) < (2*redIncrement))
 80009ec:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <glowLED+0x16c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	ee07 3a90 	vmov	s15, r3
 80009f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <glowLED+0x170>)
 80009fe:	edd3 7a00 	vldr	s15, [r3]
 8000a02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0e:	d502      	bpl.n	8000a16 <glowLED+0xda>
			dir = 0;
 8000a10:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <glowLED+0x168>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
		currRed = currRed + redIncrement;
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <glowLED+0x16c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	ee07 3a90 	vmov	s15, r3
 8000a1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a22:	4b22      	ldr	r3, [pc, #136]	; (8000aac <glowLED+0x170>)
 8000a24:	edd3 7a00 	vldr	s15, [r3]
 8000a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a30:	ee17 2a90 	vmov	r2, s15
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <glowLED+0x16c>)
 8000a36:	601a      	str	r2, [r3, #0]
		currGreen = currGreen + greenIncrement;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <glowLED+0x174>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <glowLED+0x178>)
 8000a46:	edd3 7a00 	vldr	s15, [r3]
 8000a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a52:	ee17 2a90 	vmov	r2, s15
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <glowLED+0x174>)
 8000a58:	601a      	str	r2, [r3, #0]
		currBlue = currBlue + blueIncrement;
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <glowLED+0x17c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	ee07 3a90 	vmov	s15, r3
 8000a62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <glowLED+0x180>)
 8000a68:	edd3 7a00 	vldr	s15, [r3]
 8000a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a74:	ee17 2a90 	vmov	r2, s15
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <glowLED+0x17c>)
 8000a7a:	601a      	str	r2, [r3, #0]
	}
	setAllLED(currRed, currGreen, currBlue);
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <glowLED+0x16c>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <glowLED+0x174>)
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <glowLED+0x17c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f7ff fe23 	bl	80006d4 <setAllLED>
	WS2812_Send();
 8000a8e:	f7ff fd9d 	bl	80005cc <WS2812_Send>
	HAL_Delay(delay);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fe7b 	bl	8001790 <HAL_Delay>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000040 	.word	0x20000040
 8000aa8:	200000b8 	.word	0x200000b8
 8000aac:	20000048 	.word	0x20000048
 8000ab0:	20000de4 	.word	0x20000de4
 8000ab4:	20000da0 	.word	0x20000da0
 8000ab8:	200000b0 	.word	0x200000b0
 8000abc:	20000e2c 	.word	0x20000e2c

08000ac0 <soc>:

void soc(int soc, int red, int green, int blue)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	603b      	str	r3, [r7, #0]
	float tempNUM =(soc*MAX_LED)/10000;
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	1a9b      	subs	r3, r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4a1f      	ldr	r2, [pc, #124]	; (8000b58 <soc+0x98>)
 8000ada:	fb82 1203 	smull	r1, r2, r2, r3
 8000ade:	1312      	asrs	r2, r2, #12
 8000ae0:	17db      	asrs	r3, r3, #31
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	ee07 3a90 	vmov	s15, r3
 8000ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aec:	edc7 7a06 	vstr	s15, [r7, #24]
	int numLEDs = (int)(tempNUM);
 8000af0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af8:	ee17 3a90 	vmov	r3, s15
 8000afc:	617b      	str	r3, [r7, #20]
	Set_LED(numLEDs, 0, 0, 0);
 8000afe:	2300      	movs	r3, #0
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	6978      	ldr	r0, [r7, #20]
 8000b06:	f7ff fd29 	bl	800055c <Set_LED>
	for(int x = 0; x < numLEDs; x++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e008      	b.n	8000b22 <soc+0x62>
	{
		Set_LED(x, red, green, blue);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	69f8      	ldr	r0, [r7, #28]
 8000b18:	f7ff fd20 	bl	800055c <Set_LED>
	for(int x = 0; x < numLEDs; x++)
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dbf2      	blt.n	8000b10 <soc+0x50>
	}
	WS2812_Send();
 8000b2a:	f7ff fd4f 	bl	80005cc <WS2812_Send>
	HAL_Delay(500);
 8000b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b32:	f000 fe2d 	bl	8001790 <HAL_Delay>
	Set_LED(numLEDs, red, green, blue);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	6978      	ldr	r0, [r7, #20]
 8000b3e:	f7ff fd0d 	bl	800055c <Set_LED>
	WS2812_Send();
 8000b42:	f7ff fd43 	bl	80005cc <WS2812_Send>
	HAL_Delay(500);
 8000b46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4a:	f000 fe21 	bl	8001790 <HAL_Delay>
}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	68db8bad 	.word	0x68db8bad

08000b5c <wave>:

int currTick = 0;
void wave(int waveRed, int waveGreen, int waveBlue, int bgRed, int bgGreen, int bgBlue, int waveLength, int intensity)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	603b      	str	r3, [r7, #0]
	int x = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
	int y = MAX_LED;
 8000b6e:	233c      	movs	r3, #60	; 0x3c
 8000b70:	61bb      	str	r3, [r7, #24]
	setAllLED(bgRed, bgGreen, bgBlue);
 8000b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b76:	6838      	ldr	r0, [r7, #0]
 8000b78:	f7ff fdac 	bl	80006d4 <setAllLED>
	int cycleTicks = tail*intensity;
 8000b7c:	4b57      	ldr	r3, [pc, #348]	; (8000cdc <wave+0x180>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b82:	fb02 f303 	mul.w	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
	if(currTick > cycleTicks)
 8000b88:	4b55      	ldr	r3, [pc, #340]	; (8000ce0 <wave+0x184>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	f280 809a 	bge.w	8000cc8 <wave+0x16c>
	{
		currTick = 0;
 8000b94:	4b52      	ldr	r3, [pc, #328]	; (8000ce0 <wave+0x184>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
		if(dir == 1)
 8000b9a:	4b52      	ldr	r3, [pc, #328]	; (8000ce4 <wave+0x188>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d159      	bne.n	8000c56 <wave+0xfa>
		{
			if(head <= 0)
 8000ba2:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <wave+0x18c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	dc29      	bgt.n	8000bfe <wave+0xa2>
			{
				if(tail < 3)
 8000baa:	4b4c      	ldr	r3, [pc, #304]	; (8000cdc <wave+0x180>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	dc07      	bgt.n	8000bc2 <wave+0x66>
				{
					dir = 0;
 8000bb2:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <wave+0x188>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
					head = tail;
 8000bb8:	4b48      	ldr	r3, [pc, #288]	; (8000cdc <wave+0x180>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a4a      	ldr	r2, [pc, #296]	; (8000ce8 <wave+0x18c>)
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	e07f      	b.n	8000cc2 <wave+0x166>
				}
				else
				{
					tail--;
 8000bc2:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <wave+0x180>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	4a44      	ldr	r2, [pc, #272]	; (8000cdc <wave+0x180>)
 8000bca:	6013      	str	r3, [r2, #0]
					while(x < tail)
 8000bcc:	e011      	b.n	8000bf2 <wave+0x96>
					{
						Set_LED(x, waveRed, waveGreen, waveBlue);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	68f9      	ldr	r1, [r7, #12]
 8000bd4:	69f8      	ldr	r0, [r7, #28]
 8000bd6:	f7ff fcc1 	bl	800055c <Set_LED>
						Set_LED(y, waveRed, waveGreen, waveBlue);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	68f9      	ldr	r1, [r7, #12]
 8000be0:	69b8      	ldr	r0, [r7, #24]
 8000be2:	f7ff fcbb 	bl	800055c <Set_LED>
						x++;
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3301      	adds	r3, #1
 8000bea:	61fb      	str	r3, [r7, #28]
						y--;
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
					while(x < tail)
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <wave+0x180>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbe8      	blt.n	8000bce <wave+0x72>
 8000bfc:	e061      	b.n	8000cc2 <wave+0x166>
					}
				}
			}
			else
			{
				head--;
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <wave+0x18c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	4a38      	ldr	r2, [pc, #224]	; (8000ce8 <wave+0x18c>)
 8000c06:	6013      	str	r3, [r2, #0]
				tail = head + waveLength;
 8000c08:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <wave+0x18c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a32      	ldr	r2, [pc, #200]	; (8000cdc <wave+0x180>)
 8000c12:	6013      	str	r3, [r2, #0]
				x = head;
 8000c14:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <wave+0x18c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	61fb      	str	r3, [r7, #28]
				y = MAX_LED - head;
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <wave+0x18c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000c22:	61bb      	str	r3, [r7, #24]
				while(x < tail)
 8000c24:	e011      	b.n	8000c4a <wave+0xee>
				{
					Set_LED(x, waveRed, waveGreen, waveBlue);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	68f9      	ldr	r1, [r7, #12]
 8000c2c:	69f8      	ldr	r0, [r7, #28]
 8000c2e:	f7ff fc95 	bl	800055c <Set_LED>
					Set_LED(y, waveRed, waveGreen, waveBlue);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68ba      	ldr	r2, [r7, #8]
 8000c36:	68f9      	ldr	r1, [r7, #12]
 8000c38:	69b8      	ldr	r0, [r7, #24]
 8000c3a:	f7ff fc8f 	bl	800055c <Set_LED>
					x++;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3301      	adds	r3, #1
 8000c42:	61fb      	str	r3, [r7, #28]
					y--;
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
				while(x < tail)
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <wave+0x180>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dbe8      	blt.n	8000c26 <wave+0xca>
 8000c54:	e035      	b.n	8000cc2 <wave+0x166>
				}
			}
		}
		else
		{
			head++;
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <wave+0x18c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <wave+0x18c>)
 8000c5e:	6013      	str	r3, [r2, #0]
			tail = head - waveLength;
 8000c60:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <wave+0x18c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <wave+0x180>)
 8000c6a:	6013      	str	r3, [r2, #0]
			x = tail;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <wave+0x180>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	61fb      	str	r3, [r7, #28]
			y = MAX_LED - tail;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <wave+0x180>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8000c7a:	61bb      	str	r3, [r7, #24]
			while(x < head)
 8000c7c:	e011      	b.n	8000ca2 <wave+0x146>
			{
				Set_LED(x, waveRed, waveGreen, waveBlue);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	68f9      	ldr	r1, [r7, #12]
 8000c84:	69f8      	ldr	r0, [r7, #28]
 8000c86:	f7ff fc69 	bl	800055c <Set_LED>
				Set_LED(y, waveRed, waveGreen, waveBlue);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	68f9      	ldr	r1, [r7, #12]
 8000c90:	69b8      	ldr	r0, [r7, #24]
 8000c92:	f7ff fc63 	bl	800055c <Set_LED>
				x++;
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	61fb      	str	r3, [r7, #28]
				y--;
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
			while(x < head)
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <wave+0x18c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbe8      	blt.n	8000c7e <wave+0x122>
			}
			if(head > (MAX_LED/2 + 5))
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <wave+0x18c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b23      	cmp	r3, #35	; 0x23
 8000cb2:	dd06      	ble.n	8000cc2 <wave+0x166>
			{
				dir = 1;
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <wave+0x188>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
				head = tail;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <wave+0x180>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <wave+0x18c>)
 8000cc0:	6013      	str	r3, [r2, #0]
			}
		}
		WS2812_Send();
 8000cc2:	f7ff fc83 	bl	80005cc <WS2812_Send>
	}
	else
		currTick++;
}
 8000cc6:	e004      	b.n	8000cd2 <wave+0x176>
		currTick++;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <wave+0x184>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <wave+0x184>)
 8000cd0:	6013      	str	r3, [r2, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000038 	.word	0x20000038
 8000ce0:	20000044 	.word	0x20000044
 8000ce4:	20000040 	.word	0x20000040
 8000ce8:	20000034 	.word	0x20000034

08000cec <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000cf8:	f002 f94a 	bl	8002f90 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000da4 	.word	0x20000da4
 8000d10:	2000002c 	.word	0x2000002c

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1a:	f000 fcc7 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1e:	f000 f925 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d22:	f000 fa83 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d26:	f000 fa61 	bl	80011ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d2a:	f000 fa35 	bl	8001198 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000d2e:	f000 fa09 	bl	8001144 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000d32:	f000 f985 	bl	8001040 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  int tempSOC = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
  htim1.Instance->ARR = LEDarr;
 8000d3a:	4b89      	ldr	r3, [pc, #548]	; (8000f60 <main+0x24c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2269      	movs	r2, #105	; 0x69
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch(stmState)
 8000d42:	4b88      	ldr	r3, [pc, #544]	; (8000f64 <main+0x250>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b0a      	cmp	r3, #10
 8000d48:	d8fb      	bhi.n	8000d42 <main+0x2e>
 8000d4a:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <main+0x3c>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000d7d 	.word	0x08000d7d
 8000d54:	08000d8d 	.word	0x08000d8d
 8000d58:	08000da5 	.word	0x08000da5
 8000d5c:	08000e0f 	.word	0x08000e0f
 8000d60:	08000e3b 	.word	0x08000e3b
 8000d64:	08000e5d 	.word	0x08000e5d
 8000d68:	08000e83 	.word	0x08000e83
 8000d6c:	08000ebd 	.word	0x08000ebd
 8000d70:	08000eff 	.word	0x08000eff
 8000d74:	08000dd9 	.word	0x08000dd9
 8000d78:	08000f2d 	.word	0x08000f2d
	 {
	 case INIT:
		 clearLEDData();
 8000d7c:	f7ff fc94 	bl	80006a8 <clearLEDData>
		 WS2812_Send();
 8000d80:	f7ff fc24 	bl	80005cc <WS2812_Send>
		 stmState = IDLE;
 8000d84:	4b77      	ldr	r3, [pc, #476]	; (8000f64 <main+0x250>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
		 break;
 8000d8a:	e0e8      	b.n	8000f5e <main+0x24a>
	 case IDLE:
		 if(changeFlag == 1)
 8000d8c:	4b76      	ldr	r3, [pc, #472]	; (8000f68 <main+0x254>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	f040 80d3 	bne.w	8000f3c <main+0x228>
		 {
			 changeFlag = 0;
 8000d96:	4b74      	ldr	r3, [pc, #464]	; (8000f68 <main+0x254>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
			 stmState = WAVE;
 8000d9c:	4b71      	ldr	r3, [pc, #452]	; (8000f64 <main+0x250>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	701a      	strb	r2, [r3, #0]
		 }
		 break;
 8000da2:	e0cb      	b.n	8000f3c <main+0x228>
	 case WAVE:
		 wave(75, 50, 50, 30, 20, 20, 15, 50);
 8000da4:	2332      	movs	r3, #50	; 0x32
 8000da6:	9303      	str	r3, [sp, #12]
 8000da8:	230f      	movs	r3, #15
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	2314      	movs	r3, #20
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	2314      	movs	r3, #20
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	231e      	movs	r3, #30
 8000db6:	2232      	movs	r2, #50	; 0x32
 8000db8:	2132      	movs	r1, #50	; 0x32
 8000dba:	204b      	movs	r0, #75	; 0x4b
 8000dbc:	f7ff fece 	bl	8000b5c <wave>
		 if(changeFlag == 1)
 8000dc0:	4b69      	ldr	r3, [pc, #420]	; (8000f68 <main+0x254>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	f040 80bb 	bne.w	8000f40 <main+0x22c>
		 {
			 changeFlag = 0;
 8000dca:	4b67      	ldr	r3, [pc, #412]	; (8000f68 <main+0x254>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
			 stmState = SOC;
 8000dd0:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <main+0x250>)
 8000dd2:	2209      	movs	r2, #9
 8000dd4:	701a      	strb	r2, [r3, #0]
		 }
		 break;
 8000dd6:	e0b3      	b.n	8000f40 <main+0x22c>
	 case SOC:
		 soc(tempSOC, 10, 100, 20);
 8000dd8:	2314      	movs	r3, #20
 8000dda:	2264      	movs	r2, #100	; 0x64
 8000ddc:	210a      	movs	r1, #10
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fe6e 	bl	8000ac0 <soc>
		 if(changeFlag == 1)
 8000de4:	4b60      	ldr	r3, [pc, #384]	; (8000f68 <main+0x254>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	f040 80ab 	bne.w	8000f44 <main+0x230>
		 {
			 changeFlag = 0;
 8000dee:	4b5e      	ldr	r3, [pc, #376]	; (8000f68 <main+0x254>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
			 if(tempSOC == 10000)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d102      	bne.n	8000e04 <main+0xf0>
				 stmState = BLINK;
 8000dfe:	4b59      	ldr	r3, [pc, #356]	; (8000f64 <main+0x250>)
 8000e00:	2203      	movs	r2, #3
 8000e02:	701a      	strb	r2, [r3, #0]
			 tempSOC = tempSOC + 1000;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000e0a:	607b      	str	r3, [r7, #4]
		 }
		 break;
 8000e0c:	e09a      	b.n	8000f44 <main+0x230>
	 case BLINK:
		 blinkLED(600, 500, 100, 100, 0);
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	2264      	movs	r2, #100	; 0x64
 8000e16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e1a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000e1e:	f7ff fc72 	bl	8000706 <blinkLED>
		 if(changeFlag == 1)
 8000e22:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <main+0x254>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	f040 808e 	bne.w	8000f48 <main+0x234>
		 {
			 changeFlag = 0;
 8000e2c:	4b4e      	ldr	r3, [pc, #312]	; (8000f68 <main+0x254>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
			 stmState = SLIDE;
 8000e32:	4b4c      	ldr	r3, [pc, #304]	; (8000f64 <main+0x250>)
 8000e34:	2204      	movs	r2, #4
 8000e36:	701a      	strb	r2, [r3, #0]
		 }
		 break;
 8000e38:	e086      	b.n	8000f48 <main+0x234>
	 case SLIDE:
		 slideLED(5,100,20,20);
 8000e3a:	2314      	movs	r3, #20
 8000e3c:	2214      	movs	r2, #20
 8000e3e:	2164      	movs	r1, #100	; 0x64
 8000e40:	2005      	movs	r0, #5
 8000e42:	f7ff fcf7 	bl	8000834 <slideLED>
		 if(changeFlag == 1)
 8000e46:	4b48      	ldr	r3, [pc, #288]	; (8000f68 <main+0x254>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d17e      	bne.n	8000f4c <main+0x238>
		 {
			 changeFlag = 0;
 8000e4e:	4b46      	ldr	r3, [pc, #280]	; (8000f68 <main+0x254>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
			 stmState = COMET;
 8000e54:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <main+0x250>)
 8000e56:	2205      	movs	r2, #5
 8000e58:	701a      	strb	r2, [r3, #0]
		 }
		 break;
 8000e5a:	e077      	b.n	8000f4c <main+0x238>
	 case COMET:
		 cometLED(60,100,20,0,80);
 8000e5c:	2350      	movs	r3, #80	; 0x50
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2300      	movs	r3, #0
 8000e62:	2214      	movs	r2, #20
 8000e64:	2164      	movs	r1, #100	; 0x64
 8000e66:	203c      	movs	r0, #60	; 0x3c
 8000e68:	f7ff fc6c 	bl	8000744 <cometLED>
		 if(changeFlag == 1)
 8000e6c:	4b3e      	ldr	r3, [pc, #248]	; (8000f68 <main+0x254>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d16d      	bne.n	8000f50 <main+0x23c>
		 {
			 changeFlag = 0;
 8000e74:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <main+0x254>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
			 stmState = COMET1;
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <main+0x250>)
 8000e7c:	2206      	movs	r2, #6
 8000e7e:	701a      	strb	r2, [r3, #0]
		 }
		 break;
 8000e80:	e066      	b.n	8000f50 <main+0x23c>
	 case COMET1:
		 cometLED(5,120,0,120,20);
 8000e82:	2314      	movs	r3, #20
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2378      	movs	r3, #120	; 0x78
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2178      	movs	r1, #120	; 0x78
 8000e8c:	2005      	movs	r0, #5
 8000e8e:	f7ff fc59 	bl	8000744 <cometLED>
		 if(changeFlag == 1)
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <main+0x254>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d15c      	bne.n	8000f54 <main+0x240>
		 {
			 changeFlag = 0;
 8000e9a:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <main+0x254>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
			 glowInitLED(0, 0, 100, 100, 0, 0);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2364      	movs	r3, #100	; 0x64
 8000eaa:	2264      	movs	r2, #100	; 0x64
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fcea 	bl	8000888 <glowInitLED>
			 stmState = GLOW;
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <main+0x250>)
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	701a      	strb	r2, [r3, #0]
		 }
		 break;
 8000eba:	e04b      	b.n	8000f54 <main+0x240>
	 case GLOW:
		 glowLED(40, 0, 0, 100, 100, 0, 0);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2028      	movs	r0, #40	; 0x28
 8000ed0:	f7ff fd34 	bl	800093c <glowLED>
		 if(changeFlag == 1)
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <main+0x254>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d13d      	bne.n	8000f58 <main+0x244>
		 {
			 changeFlag = 0;
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <main+0x254>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
			 glowInitLED(0, 0, 0, 255, 255, 255);
 8000ee2:	23ff      	movs	r3, #255	; 0xff
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	23ff      	movs	r3, #255	; 0xff
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	23ff      	movs	r3, #255	; 0xff
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff fcc9 	bl	8000888 <glowInitLED>
			 stmState = GLOW1;
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <main+0x250>)
 8000ef8:	2208      	movs	r2, #8
 8000efa:	701a      	strb	r2, [r3, #0]
		 }
		 break;
 8000efc:	e02c      	b.n	8000f58 <main+0x244>
	 case GLOW1:
		 glowLED(4, 0, 0, 0, 255, 255, 255);
 8000efe:	23ff      	movs	r3, #255	; 0xff
 8000f00:	9302      	str	r3, [sp, #8]
 8000f02:	23ff      	movs	r3, #255	; 0xff
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	23ff      	movs	r3, #255	; 0xff
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2004      	movs	r0, #4
 8000f12:	f7ff fd13 	bl	800093c <glowLED>
		 if(changeFlag == 1)
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <main+0x254>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d11e      	bne.n	8000f5c <main+0x248>
		 {
			 changeFlag = 0;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <main+0x254>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
			 stmState = CLEARALL;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <main+0x250>)
 8000f26:	220a      	movs	r2, #10
 8000f28:	701a      	strb	r2, [r3, #0]
		 }
		 break;
 8000f2a:	e017      	b.n	8000f5c <main+0x248>
	 case CLEARALL:
		 clearLEDData();
 8000f2c:	f7ff fbbc 	bl	80006a8 <clearLEDData>
		 WS2812_Send();
 8000f30:	f7ff fb4c 	bl	80005cc <WS2812_Send>
		 stmState = IDLE;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <main+0x250>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
		 break;
 8000f3a:	e010      	b.n	8000f5e <main+0x24a>
		 break;
 8000f3c:	bf00      	nop
 8000f3e:	e700      	b.n	8000d42 <main+0x2e>
		 break;
 8000f40:	bf00      	nop
 8000f42:	e6fe      	b.n	8000d42 <main+0x2e>
		 break;
 8000f44:	bf00      	nop
 8000f46:	e6fc      	b.n	8000d42 <main+0x2e>
		 break;
 8000f48:	bf00      	nop
 8000f4a:	e6fa      	b.n	8000d42 <main+0x2e>
		 break;
 8000f4c:	bf00      	nop
 8000f4e:	e6f8      	b.n	8000d42 <main+0x2e>
		 break;
 8000f50:	bf00      	nop
 8000f52:	e6f6      	b.n	8000d42 <main+0x2e>
		 break;
 8000f54:	bf00      	nop
 8000f56:	e6f4      	b.n	8000d42 <main+0x2e>
		 break;
 8000f58:	bf00      	nop
 8000f5a:	e6f2      	b.n	8000d42 <main+0x2e>
		 break;
 8000f5c:	bf00      	nop
	 switch(stmState)
 8000f5e:	e6f0      	b.n	8000d42 <main+0x2e>
 8000f60:	20000da4 	.word	0x20000da4
 8000f64:	20000028 	.word	0x20000028
 8000f68:	20000030 	.word	0x20000030

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2230      	movs	r2, #48	; 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fc5a 	bl	8004834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <SystemClock_Config+0xcc>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <SystemClock_Config+0xcc>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <SystemClock_Config+0xcc>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <SystemClock_Config+0xd0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fb8:	4a20      	ldr	r2, [pc, #128]	; (800103c <SystemClock_Config+0xd0>)
 8000fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <SystemClock_Config+0xd0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000fe4:	2354      	movs	r3, #84	; 0x54
 8000fe6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fec:	2304      	movs	r3, #4
 8000fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 fa5d 	bl	80024b4 <HAL_RCC_OscConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001000:	f000 f97e 	bl	8001300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001004:	230f      	movs	r3, #15
 8001006:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001008:	2302      	movs	r3, #2
 800100a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2102      	movs	r1, #2
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fcb7 	bl	8002994 <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800102c:	f000 f968 	bl	8001300 <Error_Handler>
  }
}
 8001030:	bf00      	nop
 8001032:	3750      	adds	r7, #80	; 0x50
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b092      	sub	sp, #72	; 0x48
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001046:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2220      	movs	r2, #32
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fbe2 	bl	8004834 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001070:	4b32      	ldr	r3, [pc, #200]	; (800113c <MX_TIM1_Init+0xfc>)
 8001072:	4a33      	ldr	r2, [pc, #204]	; (8001140 <MX_TIM1_Init+0x100>)
 8001074:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <MX_TIM1_Init+0xfc>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <MX_TIM1_Init+0xfc>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 75;
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <MX_TIM1_Init+0xfc>)
 8001084:	224b      	movs	r2, #75	; 0x4b
 8001086:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <MX_TIM1_Init+0xfc>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800108e:	4b2b      	ldr	r3, [pc, #172]	; (800113c <MX_TIM1_Init+0xfc>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <MX_TIM1_Init+0xfc>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800109a:	4828      	ldr	r0, [pc, #160]	; (800113c <MX_TIM1_Init+0xfc>)
 800109c:	f001 fe46 	bl	8002d2c <HAL_TIM_PWM_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80010a6:	f000 f92b 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010b6:	4619      	mov	r1, r3
 80010b8:	4820      	ldr	r0, [pc, #128]	; (800113c <MX_TIM1_Init+0xfc>)
 80010ba:	f002 fccd 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80010c4:	f000 f91c 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c8:	2360      	movs	r3, #96	; 0x60
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 50;
 80010cc:	2332      	movs	r3, #50	; 0x32
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <MX_TIM1_Init+0xfc>)
 80010ee:	f002 f8fd 	bl	80032ec <HAL_TIM_PWM_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80010f8:	f000 f902 	bl	8001300 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001114:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <MX_TIM1_Init+0xfc>)
 8001120:	f002 fd08 	bl	8003b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800112a:	f000 f8e9 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <MX_TIM1_Init+0xfc>)
 8001130:	f000 f96e 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8001134:	bf00      	nop
 8001136:	3748      	adds	r7, #72	; 0x48
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000da4 	.word	0x20000da4
 8001140:	40010000 	.word	0x40010000

08001144 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_USART1_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 8001150:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001154:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 800117c:	f002 fd40 	bl	8003c00 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 f8bb 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000d58 	.word	0x20000d58
 8001194:	40011000 	.word	0x40011000

08001198 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <MX_USART2_UART_Init+0x50>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART2_UART_Init+0x4c>)
 80011d0:	f002 fd16 	bl	8003c00 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011da:	f000 f891 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000de8 	.word	0x20000de8
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_DMA_Init+0x3c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <MX_DMA_Init+0x3c>)
 80011fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_DMA_Init+0x3c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2039      	movs	r0, #57	; 0x39
 8001214:	f000 fbb9 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001218:	2039      	movs	r0, #57	; 0x39
 800121a:	f000 fbd2 	bl	80019c2 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <MX_GPIO_Init+0xc4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a29      	ldr	r2, [pc, #164]	; (80012f0 <MX_GPIO_Init+0xc4>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <MX_GPIO_Init+0xc4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <MX_GPIO_Init+0xc4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <MX_GPIO_Init+0xc4>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_GPIO_Init+0xc4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_GPIO_Init+0xc4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <MX_GPIO_Init+0xc4>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_GPIO_Init+0xc4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2120      	movs	r1, #32
 800129a:	4816      	ldr	r0, [pc, #88]	; (80012f4 <MX_GPIO_Init+0xc8>)
 800129c:	f001 f8be 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blue_Pin */
  GPIO_InitStruct.Pin = blue_Pin;
 80012a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_GPIO_Init+0xcc>)
 80012a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(blue_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	4811      	ldr	r0, [pc, #68]	; (80012fc <MX_GPIO_Init+0xd0>)
 80012b6:	f000 ff2f 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012ba:	2320      	movs	r3, #32
 80012bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <MX_GPIO_Init+0xc8>)
 80012d2:	f000 ff21 	bl	8002118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2028      	movs	r0, #40	; 0x28
 80012dc:	f000 fb55 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012e0:	2028      	movs	r0, #40	; 0x28
 80012e2:	f000 fb6e 	bl	80019c2 <HAL_NVIC_EnableIRQ>

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	10110000 	.word	0x10110000
 80012fc:	40020800 	.word	0x40020800

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001306:	e7fe      	b.n	8001306 <Error_Handler+0x6>

08001308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_MspInit+0x4c>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a26      	ldr	r2, [pc, #152]	; (8001400 <HAL_TIM_PWM_MspInit+0xa8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d146      	bne.n	80013f8 <HAL_TIM_PWM_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <HAL_TIM_PWM_MspInit+0xac>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a24      	ldr	r2, [pc, #144]	; (8001404 <HAL_TIM_PWM_MspInit+0xac>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_TIM_PWM_MspInit+0xac>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 8001388:	4a20      	ldr	r2, [pc, #128]	; (800140c <HAL_TIM_PWM_MspInit+0xb4>)
 800138a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 800138e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001392:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 8001396:	2240      	movs	r2, #64	; 0x40
 8001398:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 80013a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 80013aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ae:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 80013b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013b6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 80013c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c4:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80013cc:	480e      	ldr	r0, [pc, #56]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 80013ce:	f000 fb13 	bl	80019f8 <HAL_DMA_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 80013d8:	f7ff ff92 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <HAL_TIM_PWM_MspInit+0xb0>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	201b      	movs	r0, #27
 80013ee:	f000 facc 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013f2:	201b      	movs	r0, #27
 80013f4:	f000 fae5 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010000 	.word	0x40010000
 8001404:	40023800 	.word	0x40023800
 8001408:	2000004c 	.word	0x2000004c
 800140c:	40026428 	.word	0x40026428

08001410 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_TIM_MspPostInit+0x68>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d11e      	bne.n	8001470 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_TIM_MspPostInit+0x6c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_TIM_MspPostInit+0x6c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_TIM_MspPostInit+0x6c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800144e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001452:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001460:	2301      	movs	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_TIM_MspPostInit+0x70>)
 800146c:	f000 fe54 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40010000 	.word	0x40010000
 800147c:	40023800 	.word	0x40023800
 8001480:	40020000 	.word	0x40020000

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a36      	ldr	r2, [pc, #216]	; (800157c <HAL_UART_MspInit+0xf8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d135      	bne.n	8001512 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a34      	ldr	r2, [pc, #208]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014b0:	f043 0310 	orr.w	r3, r3, #16
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_UART_MspInit+0xfc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f0:	2307      	movs	r3, #7
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4822      	ldr	r0, [pc, #136]	; (8001584 <HAL_UART_MspInit+0x100>)
 80014fc:	f000 fe0c 	bl	8002118 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2025      	movs	r0, #37	; 0x25
 8001506:	f000 fa40 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800150a:	2025      	movs	r0, #37	; 0x25
 800150c:	f000 fa59 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001510:	e030      	b.n	8001574 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <HAL_UART_MspInit+0x104>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d12b      	bne.n	8001574 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a16      	ldr	r2, [pc, #88]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_UART_MspInit+0xfc>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_UART_MspInit+0xfc>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_UART_MspInit+0xfc>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_UART_MspInit+0xfc>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001554:	230c      	movs	r3, #12
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001564:	2307      	movs	r3, #7
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <HAL_UART_MspInit+0x100>)
 8001570:	f000 fdd2 	bl	8002118 <HAL_GPIO_Init>
}
 8001574:	bf00      	nop
 8001576:	3730      	adds	r7, #48	; 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40011000 	.word	0x40011000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020000 	.word	0x40020000
 8001588:	40004400 	.word	0x40004400

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 f8ba 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <TIM1_CC_IRQHandler+0x10>)
 80015e6:	f001 fd79 	bl	80030dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000da4 	.word	0x20000da4

080015f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <USART1_IRQHandler+0x10>)
 80015fa:	f002 fb4f 	bl	8003c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000d58 	.word	0x20000d58

08001608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800160c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001610:	f000 ff38 	bl	8002484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA2_Stream1_IRQHandler+0x10>)
 800161e:	f000 fb13 	bl	8001c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000004c 	.word	0x2000004c

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <SystemInit+0x28>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <SystemInit+0x28>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SystemInit+0x28>)
 8001642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001646:	609a      	str	r2, [r3, #8]
#endif
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001690 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800165c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800165e:	e003      	b.n	8001668 <LoopCopyDataInit>

08001660 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001662:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001664:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001666:	3104      	adds	r1, #4

08001668 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800166c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800166e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001670:	d3f6      	bcc.n	8001660 <CopyDataInit>
  ldr  r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001674:	e002      	b.n	800167c <LoopFillZerobss>

08001676 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001676:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001678:	f842 3b04 	str.w	r3, [r2], #4

0800167c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800167e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001680:	d3f9      	bcc.n	8001676 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001682:	f7ff ffd3 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f003 f8b1 	bl	80047ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168a:	f7ff fb43 	bl	8000d14 <main>
  bx  lr    
 800168e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001690:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001694:	0800488c 	.word	0x0800488c
  ldr  r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800169c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80016a0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80016a4:	20000e34 	.word	0x20000e34

080016a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_Init+0x40>)
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_Init+0x40>)
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_Init+0x40>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f94d 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff fe12 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f965 	bl	80019de <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f92d 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000000 	.word	0x20000000
 8001748:	20000008 	.word	0x20000008
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008
 8001774:	20000e30 	.word	0x20000e30

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000e30 	.word	0x20000e30

08001790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff ffee 	bl	8001778 <HAL_GetTick>
 800179c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d005      	beq.n	80017b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_Delay+0x40>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b6:	bf00      	nop
 80017b8:	f7ff ffde 	bl	8001778 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8f7      	bhi.n	80017b8 <HAL_Delay+0x28>
  {
  }
}
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000008 	.word	0x20000008

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff feb8 	bl	8001778 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e099      	b.n	8001b48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a34:	e00f      	b.n	8001a56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a36:	f7ff fe9f 	bl	8001778 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d908      	bls.n	8001a56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e078      	b.n	8001b48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1e8      	bne.n	8001a36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_DMA_Init+0x158>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d107      	bne.n	8001ac0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f023 0307 	bic.w	r3, r3, #7
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d117      	bne.n	8001b1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fa91 	bl	8002024 <DMA_CheckFifoParam>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b16:	2301      	movs	r3, #1
 8001b18:	e016      	b.n	8001b48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fa48 	bl	8001fb8 <DMA_CalcBaseAndBitshift>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	223f      	movs	r2, #63	; 0x3f
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	f010803f 	.word	0xf010803f

08001b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_DMA_Start_IT+0x26>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e040      	b.n	8001bfc <HAL_DMA_Start_IT+0xa8>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d12f      	bne.n	8001bee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 f9da 	bl	8001f5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	223f      	movs	r2, #63	; 0x3f
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0216 	orr.w	r2, r2, #22
 8001bc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0208 	orr.w	r2, r2, #8
 8001bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e005      	b.n	8001bfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d004      	beq.n	8001c22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00c      	b.n	8001c3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2205      	movs	r2, #5
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c54:	4b92      	ldr	r3, [pc, #584]	; (8001ea0 <HAL_DMA_IRQHandler+0x258>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a92      	ldr	r2, [pc, #584]	; (8001ea4 <HAL_DMA_IRQHandler+0x25c>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0a9b      	lsrs	r3, r3, #10
 8001c60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	2208      	movs	r2, #8
 8001c74:	409a      	lsls	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d01a      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0204 	bic.w	r2, r2, #4
 8001c9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f043 0201 	orr.w	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	2201      	movs	r2, #1
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d012      	beq.n	8001cea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00b      	beq.n	8001cea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	f043 0202 	orr.w	r2, r3, #2
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2204      	movs	r2, #4
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d012      	beq.n	8001d20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00b      	beq.n	8001d20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	f043 0204 	orr.w	r2, r3, #4
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2210      	movs	r2, #16
 8001d26:	409a      	lsls	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d043      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03c      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2210      	movs	r2, #16
 8001d44:	409a      	lsls	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d018      	beq.n	8001d8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d108      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d024      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	4798      	blx	r3
 8001d76:	e01f      	b.n	8001db8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01b      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
 8001d88:	e016      	b.n	8001db8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d107      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0208 	bic.w	r2, r2, #8
 8001da6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 808e 	beq.w	8001ee6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 8086 	beq.w	8001ee6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	2220      	movs	r2, #32
 8001de0:	409a      	lsls	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d136      	bne.n	8001e60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0216 	bic.w	r2, r2, #22
 8001e00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <HAL_DMA_IRQHandler+0x1da>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0208 	bic.w	r2, r2, #8
 8001e30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	223f      	movs	r2, #63	; 0x3f
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d07d      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
        }
        return;
 8001e5e:	e078      	b.n	8001f52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01c      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d108      	bne.n	8001e8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d030      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
 8001e8c:	e02b      	b.n	8001ee6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d027      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
 8001e9e:	e022      	b.n	8001ee6 <HAL_DMA_IRQHandler+0x29e>
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0210 	bic.w	r2, r2, #16
 8001ec4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d032      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d022      	beq.n	8001f40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2205      	movs	r2, #5
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3301      	adds	r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d307      	bcc.n	8001f2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f2      	bne.n	8001f12 <HAL_DMA_IRQHandler+0x2ca>
 8001f2c:	e000      	b.n	8001f30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001f2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
 8001f50:	e000      	b.n	8001f54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001f52:	bf00      	nop
    }
  }
}
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop

08001f5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b40      	cmp	r3, #64	; 0x40
 8001f88:	d108      	bne.n	8001f9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f9a:	e007      	b.n	8001fac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	60da      	str	r2, [r3, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3b10      	subs	r3, #16
 8001fc8:	4a14      	ldr	r2, [pc, #80]	; (800201c <DMA_CalcBaseAndBitshift+0x64>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fd2:	4a13      	ldr	r2, [pc, #76]	; (8002020 <DMA_CalcBaseAndBitshift+0x68>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d909      	bls.n	8001ffa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	1d1a      	adds	r2, r3, #4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff8:	e007      	b.n	800200a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	aaaaaaab 	.word	0xaaaaaaab
 8002020:	08004874 	.word	0x08004874

08002024 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11f      	bne.n	800207e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d855      	bhi.n	80020f0 <DMA_CheckFifoParam+0xcc>
 8002044:	a201      	add	r2, pc, #4	; (adr r2, 800204c <DMA_CheckFifoParam+0x28>)
 8002046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204a:	bf00      	nop
 800204c:	0800205d 	.word	0x0800205d
 8002050:	0800206f 	.word	0x0800206f
 8002054:	0800205d 	.word	0x0800205d
 8002058:	080020f1 	.word	0x080020f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d045      	beq.n	80020f4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800206c:	e042      	b.n	80020f4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002076:	d13f      	bne.n	80020f8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800207c:	e03c      	b.n	80020f8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002086:	d121      	bne.n	80020cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d836      	bhi.n	80020fc <DMA_CheckFifoParam+0xd8>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <DMA_CheckFifoParam+0x70>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	080020a5 	.word	0x080020a5
 8002098:	080020ab 	.word	0x080020ab
 800209c:	080020a5 	.word	0x080020a5
 80020a0:	080020bd 	.word	0x080020bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
      break;
 80020a8:	e02f      	b.n	800210a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d024      	beq.n	8002100 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ba:	e021      	b.n	8002100 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020c4:	d11e      	bne.n	8002104 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ca:	e01b      	b.n	8002104 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d902      	bls.n	80020d8 <DMA_CheckFifoParam+0xb4>
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d003      	beq.n	80020de <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020d6:	e018      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      break;
 80020dc:	e015      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00e      	beq.n	8002108 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      break;
 80020ee:	e00b      	b.n	8002108 <DMA_CheckFifoParam+0xe4>
      break;
 80020f0:	bf00      	nop
 80020f2:	e00a      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      break;
 80020f4:	bf00      	nop
 80020f6:	e008      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      break;
 80020f8:	bf00      	nop
 80020fa:	e006      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      break;
 80020fc:	bf00      	nop
 80020fe:	e004      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      break;
 8002100:	bf00      	nop
 8002102:	e002      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      break;   
 8002104:	bf00      	nop
 8002106:	e000      	b.n	800210a <DMA_CheckFifoParam+0xe6>
      break;
 8002108:	bf00      	nop
    }
  } 
  
  return status; 
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e159      	b.n	80023e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	f040 8148 	bne.w	80023e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d00b      	beq.n	8002172 <HAL_GPIO_Init+0x5a>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002166:	2b11      	cmp	r3, #17
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b12      	cmp	r3, #18
 8002170:	d130      	bne.n	80021d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 0201 	and.w	r2, r3, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0xfc>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b12      	cmp	r3, #18
 8002212:	d123      	bne.n	800225c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a2 	beq.w	80023e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b56      	ldr	r3, [pc, #344]	; (80023fc <HAL_GPIO_Init+0x2e4>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a55      	ldr	r2, [pc, #340]	; (80023fc <HAL_GPIO_Init+0x2e4>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b53      	ldr	r3, [pc, #332]	; (80023fc <HAL_GPIO_Init+0x2e4>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ba:	4a51      	ldr	r2, [pc, #324]	; (8002400 <HAL_GPIO_Init+0x2e8>)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3302      	adds	r3, #2
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a48      	ldr	r2, [pc, #288]	; (8002404 <HAL_GPIO_Init+0x2ec>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d019      	beq.n	800231a <HAL_GPIO_Init+0x202>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a47      	ldr	r2, [pc, #284]	; (8002408 <HAL_GPIO_Init+0x2f0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_GPIO_Init+0x1fe>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a46      	ldr	r2, [pc, #280]	; (800240c <HAL_GPIO_Init+0x2f4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00d      	beq.n	8002312 <HAL_GPIO_Init+0x1fa>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a45      	ldr	r2, [pc, #276]	; (8002410 <HAL_GPIO_Init+0x2f8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <HAL_GPIO_Init+0x1f6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a44      	ldr	r2, [pc, #272]	; (8002414 <HAL_GPIO_Init+0x2fc>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d101      	bne.n	800230a <HAL_GPIO_Init+0x1f2>
 8002306:	2304      	movs	r3, #4
 8002308:	e008      	b.n	800231c <HAL_GPIO_Init+0x204>
 800230a:	2307      	movs	r3, #7
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x204>
 800230e:	2303      	movs	r3, #3
 8002310:	e004      	b.n	800231c <HAL_GPIO_Init+0x204>
 8002312:	2302      	movs	r3, #2
 8002314:	e002      	b.n	800231c <HAL_GPIO_Init+0x204>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_GPIO_Init+0x204>
 800231a:	2300      	movs	r3, #0
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	f002 0203 	and.w	r2, r2, #3
 8002322:	0092      	lsls	r2, r2, #2
 8002324:	4093      	lsls	r3, r2
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800232c:	4934      	ldr	r1, [pc, #208]	; (8002400 <HAL_GPIO_Init+0x2e8>)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	3302      	adds	r3, #2
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <HAL_GPIO_Init+0x300>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235e:	4a2e      	ldr	r2, [pc, #184]	; (8002418 <HAL_GPIO_Init+0x300>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002364:	4b2c      	ldr	r3, [pc, #176]	; (8002418 <HAL_GPIO_Init+0x300>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002388:	4a23      	ldr	r2, [pc, #140]	; (8002418 <HAL_GPIO_Init+0x300>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <HAL_GPIO_Init+0x300>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b2:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_GPIO_Init+0x300>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_GPIO_Init+0x300>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <HAL_GPIO_Init+0x300>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3301      	adds	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b0f      	cmp	r3, #15
 80023ec:	f67f aea2 	bls.w	8002134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f0:	bf00      	nop
 80023f2:	3724      	adds	r7, #36	; 0x24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40013c00 	.word	0x40013c00

0800241c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
 8002428:	4613      	mov	r3, r2
 800242a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800242c:	787b      	ldrb	r3, [r7, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002438:	e003      	b.n	8002442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	041a      	lsls	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	401a      	ands	r2, r3
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	429a      	cmp	r2, r3
 8002466:	d104      	bne.n	8002472 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	041a      	lsls	r2, r3, #16
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002470:	e002      	b.n	8002478 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f842 	bl	800052c <HAL_GPIO_EXTI_Callback>
  }
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40013c00 	.word	0x40013c00

080024b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e25b      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d075      	beq.n	80025be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d2:	4ba3      	ldr	r3, [pc, #652]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d00c      	beq.n	80024f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4ba0      	ldr	r3, [pc, #640]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d112      	bne.n	8002510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ea:	4b9d      	ldr	r3, [pc, #628]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f6:	d10b      	bne.n	8002510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	4b99      	ldr	r3, [pc, #612]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d05b      	beq.n	80025bc <HAL_RCC_OscConfig+0x108>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d157      	bne.n	80025bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e236      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d106      	bne.n	8002528 <HAL_RCC_OscConfig+0x74>
 800251a:	4b91      	ldr	r3, [pc, #580]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a90      	ldr	r2, [pc, #576]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e01d      	b.n	8002564 <HAL_RCC_OscConfig+0xb0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002530:	d10c      	bne.n	800254c <HAL_RCC_OscConfig+0x98>
 8002532:	4b8b      	ldr	r3, [pc, #556]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a8a      	ldr	r2, [pc, #552]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b88      	ldr	r3, [pc, #544]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a87      	ldr	r2, [pc, #540]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e00b      	b.n	8002564 <HAL_RCC_OscConfig+0xb0>
 800254c:	4b84      	ldr	r3, [pc, #528]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a83      	ldr	r2, [pc, #524]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b81      	ldr	r3, [pc, #516]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a80      	ldr	r2, [pc, #512]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7ff f904 	bl	8001778 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002574:	f7ff f900 	bl	8001778 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1fb      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b76      	ldr	r3, [pc, #472]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0xc0>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff f8f0 	bl	8001778 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259c:	f7ff f8ec 	bl	8001778 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1e7      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	4b6c      	ldr	r3, [pc, #432]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0xe8>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d063      	beq.n	8002692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b62      	ldr	r3, [pc, #392]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d11c      	bne.n	800261c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e2:	4b5f      	ldr	r3, [pc, #380]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	4b5c      	ldr	r3, [pc, #368]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x152>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e1bb      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b56      	ldr	r3, [pc, #344]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4952      	ldr	r1, [pc, #328]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	e03a      	b.n	8002692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002624:	4b4f      	ldr	r3, [pc, #316]	; (8002764 <HAL_RCC_OscConfig+0x2b0>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7ff f8a5 	bl	8001778 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002632:	f7ff f8a1 	bl	8001778 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e19c      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	4b46      	ldr	r3, [pc, #280]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b43      	ldr	r3, [pc, #268]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4940      	ldr	r1, [pc, #256]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
 8002664:	e015      	b.n	8002692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_OscConfig+0x2b0>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7ff f884 	bl	8001778 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002674:	f7ff f880 	bl	8001778 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e17b      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d030      	beq.n	8002700 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d016      	beq.n	80026d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_RCC_OscConfig+0x2b4>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7ff f864 	bl	8001778 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b4:	f7ff f860 	bl	8001778 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e15b      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x200>
 80026d2:	e015      	b.n	8002700 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_RCC_OscConfig+0x2b4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026da:	f7ff f84d 	bl	8001778 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e2:	f7ff f849 	bl	8001778 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e144      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a0 	beq.w	800284e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_OscConfig+0x2b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d121      	bne.n	800278e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_RCC_OscConfig+0x2b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a07      	ldr	r2, [pc, #28]	; (800276c <HAL_RCC_OscConfig+0x2b8>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7ff f80f 	bl	8001778 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	e011      	b.n	8002782 <HAL_RCC_OscConfig+0x2ce>
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	42470000 	.word	0x42470000
 8002768:	42470e80 	.word	0x42470e80
 800276c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7ff f802 	bl	8001778 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0fd      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002782:	4b81      	ldr	r3, [pc, #516]	; (8002988 <HAL_RCC_OscConfig+0x4d4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d106      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2f0>
 8002796:	4b7d      	ldr	r3, [pc, #500]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a7c      	ldr	r2, [pc, #496]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	e01c      	b.n	80027de <HAL_RCC_OscConfig+0x32a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x312>
 80027ac:	4b77      	ldr	r3, [pc, #476]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a76      	ldr	r2, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	4b74      	ldr	r3, [pc, #464]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a73      	ldr	r2, [pc, #460]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x32a>
 80027c6:	4b71      	ldr	r3, [pc, #452]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a70      	ldr	r2, [pc, #448]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	4b6e      	ldr	r3, [pc, #440]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a6d      	ldr	r2, [pc, #436]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7fe ffc7 	bl	8001778 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe ffc3 	bl	8001778 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0bc      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	4b61      	ldr	r3, [pc, #388]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ee      	beq.n	80027ee <HAL_RCC_OscConfig+0x33a>
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7fe ffb1 	bl	8001778 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe ffad 	bl	8001778 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0a6      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	4b56      	ldr	r3, [pc, #344]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ee      	bne.n	800281a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b52      	ldr	r3, [pc, #328]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a51      	ldr	r2, [pc, #324]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8092 	beq.w	800297c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002858:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d05c      	beq.n	800291e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d141      	bne.n	80028f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286c:	4b48      	ldr	r3, [pc, #288]	; (8002990 <HAL_RCC_OscConfig+0x4dc>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe ff81 	bl	8001778 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe ff7d 	bl	8001778 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e078      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288c:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	019b      	lsls	r3, r3, #6
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	3b01      	subs	r3, #1
 80028b2:	041b      	lsls	r3, r3, #16
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	061b      	lsls	r3, r3, #24
 80028bc:	4933      	ldr	r1, [pc, #204]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c2:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_RCC_OscConfig+0x4dc>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c8:	f7fe ff56 	bl	8001778 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d0:	f7fe ff52 	bl	8001778 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04d      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x41c>
 80028ee:	e045      	b.n	800297c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCC_OscConfig+0x4dc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7fe ff3f 	bl	8001778 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe ff3b 	bl	8001778 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e036      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002910:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x44a>
 800291c:	e02e      	b.n	800297c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e029      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_RCC_OscConfig+0x4d8>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	429a      	cmp	r2, r3
 800293c:	d11c      	bne.n	8002978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d115      	bne.n	8002978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002952:	4013      	ands	r3, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002958:	4293      	cmp	r3, r2
 800295a:	d10d      	bne.n	8002978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d106      	bne.n	8002978 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40007000 	.word	0x40007000
 800298c:	40023800 	.word	0x40023800
 8002990:	42470060 	.word	0x42470060

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0cc      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d90c      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d044      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d119      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e067      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4934      	ldr	r1, [pc, #208]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a84:	f7fe fe78 	bl	8001778 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7fe fe74 	bl	8001778 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e04f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d20c      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f821 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4601      	mov	r1, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	5cd3      	ldrb	r3, [r2, r3]
 8002b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe fdd8 	bl	80016f0 <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	0800485c 	.word	0x0800485c
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000004 	.word	0x20000004

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b76:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d007      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x32>
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d008      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x38>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 808d 	bne.w	8002ca6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b8e:	60bb      	str	r3, [r7, #8]
       break;
 8002b90:	e08c      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b92:	4b4b      	ldr	r3, [pc, #300]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b94:	60bb      	str	r3, [r7, #8]
      break;
 8002b96:	e089      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b98:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba2:	4b45      	ldr	r3, [pc, #276]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d023      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bae:	4b42      	ldr	r3, [pc, #264]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	f04f 0400 	mov.w	r4, #0
 8002bb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	ea03 0501 	and.w	r5, r3, r1
 8002bc4:	ea04 0602 	and.w	r6, r4, r2
 8002bc8:	4a3d      	ldr	r2, [pc, #244]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bca:	fb02 f106 	mul.w	r1, r2, r6
 8002bce:	2200      	movs	r2, #0
 8002bd0:	fb02 f205 	mul.w	r2, r2, r5
 8002bd4:	440a      	add	r2, r1
 8002bd6:	493a      	ldr	r1, [pc, #232]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bd8:	fba5 0101 	umull	r0, r1, r5, r1
 8002bdc:	1853      	adds	r3, r2, r1
 8002bde:	4619      	mov	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f04f 0400 	mov.w	r4, #0
 8002be6:	461a      	mov	r2, r3
 8002be8:	4623      	mov	r3, r4
 8002bea:	f7fd faf3 	bl	80001d4 <__aeabi_uldivmod>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	460c      	mov	r4, r1
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e049      	b.n	8002c8a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	f04f 0400 	mov.w	r4, #0
 8002c00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	ea03 0501 	and.w	r5, r3, r1
 8002c0c:	ea04 0602 	and.w	r6, r4, r2
 8002c10:	4629      	mov	r1, r5
 8002c12:	4632      	mov	r2, r6
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	0154      	lsls	r4, r2, #5
 8002c1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c22:	014b      	lsls	r3, r1, #5
 8002c24:	4619      	mov	r1, r3
 8002c26:	4622      	mov	r2, r4
 8002c28:	1b49      	subs	r1, r1, r5
 8002c2a:	eb62 0206 	sbc.w	r2, r2, r6
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	0194      	lsls	r4, r2, #6
 8002c38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c3c:	018b      	lsls	r3, r1, #6
 8002c3e:	1a5b      	subs	r3, r3, r1
 8002c40:	eb64 0402 	sbc.w	r4, r4, r2
 8002c44:	f04f 0100 	mov.w	r1, #0
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	00e2      	lsls	r2, r4, #3
 8002c4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c52:	00d9      	lsls	r1, r3, #3
 8002c54:	460b      	mov	r3, r1
 8002c56:	4614      	mov	r4, r2
 8002c58:	195b      	adds	r3, r3, r5
 8002c5a:	eb44 0406 	adc.w	r4, r4, r6
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	02a2      	lsls	r2, r4, #10
 8002c68:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c6c:	0299      	lsls	r1, r3, #10
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4614      	mov	r4, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	4621      	mov	r1, r4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f04f 0400 	mov.w	r4, #0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4623      	mov	r3, r4
 8002c80:	f7fd faa8 	bl	80001d4 <__aeabi_uldivmod>
 8002c84:	4603      	mov	r3, r0
 8002c86:	460c      	mov	r4, r1
 8002c88:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	3301      	adds	r3, #1
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca2:	60bb      	str	r3, [r7, #8]
      break;
 8002ca4:	e002      	b.n	8002cac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ca8:	60bb      	str	r3, [r7, #8]
      break;
 8002caa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cac:	68bb      	ldr	r3, [r7, #8]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	017d7840 	.word	0x017d7840

08002cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000000 	.word	0x20000000

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff0 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4601      	mov	r1, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4a03      	ldr	r2, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	0800486c 	.word	0x0800486c

08002d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d08:	f7ff ffdc 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	0b5b      	lsrs	r3, r3, #13
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4a03      	ldr	r2, [pc, #12]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40023800 	.word	0x40023800
 8002d28:	0800486c 	.word	0x0800486c

08002d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e01d      	b.n	8002d7a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe fb00 	bl	8001358 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 fc42 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0e9      	b.n	8002f76 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d10b      	bne.n	8002dc6 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_PWM_Start_DMA+0x3a>
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0db      	b.n	8002f76 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	f200 80ad 	bhi.w	8002f28 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8002dce:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <HAL_TIM_PWM_Start_DMA+0x50>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002f29 	.word	0x08002f29
 8002ddc:	08002f29 	.word	0x08002f29
 8002de0:	08002f29 	.word	0x08002f29
 8002de4:	08002e51 	.word	0x08002e51
 8002de8:	08002f29 	.word	0x08002f29
 8002dec:	08002f29 	.word	0x08002f29
 8002df0:	08002f29 	.word	0x08002f29
 8002df4:	08002e99 	.word	0x08002e99
 8002df8:	08002f29 	.word	0x08002f29
 8002dfc:	08002f29 	.word	0x08002f29
 8002e00:	08002f29 	.word	0x08002f29
 8002e04:	08002ee1 	.word	0x08002ee1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	4a5c      	ldr	r2, [pc, #368]	; (8002f80 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	4a5b      	ldr	r2, [pc, #364]	; (8002f84 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	4a5a      	ldr	r2, [pc, #360]	; (8002f88 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002e1e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3334      	adds	r3, #52	; 0x34
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	f7fe fe90 	bl	8001b54 <HAL_DMA_Start_IT>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e09b      	b.n	8002f76 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4c:	60da      	str	r2, [r3, #12]
      break;
 8002e4e:	e06c      	b.n	8002f2a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	4a4a      	ldr	r2, [pc, #296]	; (8002f80 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002e56:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	4a49      	ldr	r2, [pc, #292]	; (8002f84 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	4a48      	ldr	r2, [pc, #288]	; (8002f88 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002e66:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3338      	adds	r3, #56	; 0x38
 8002e74:	461a      	mov	r2, r3
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	f7fe fe6c 	bl	8001b54 <HAL_DMA_Start_IT>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e077      	b.n	8002f76 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e94:	60da      	str	r2, [r3, #12]
      break;
 8002e96:	e048      	b.n	8002f2a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	4a38      	ldr	r2, [pc, #224]	; (8002f80 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002e9e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	4a37      	ldr	r2, [pc, #220]	; (8002f84 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002eae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	333c      	adds	r3, #60	; 0x3c
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	f7fe fe48 	bl	8001b54 <HAL_DMA_Start_IT>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e053      	b.n	8002f76 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002edc:	60da      	str	r2, [r3, #12]
      break;
 8002ede:	e024      	b.n	8002f2a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8002ee6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	4a25      	ldr	r2, [pc, #148]	; (8002f84 <HAL_TIM_PWM_Start_DMA+0x200>)
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	4a24      	ldr	r2, [pc, #144]	; (8002f88 <HAL_TIM_PWM_Start_DMA+0x204>)
 8002ef6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3340      	adds	r3, #64	; 0x40
 8002f04:	461a      	mov	r2, r3
 8002f06:	887b      	ldrh	r3, [r7, #2]
 8002f08:	f7fe fe24 	bl	8001b54 <HAL_DMA_Start_IT>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e02f      	b.n	8002f76 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f24:	60da      	str	r2, [r3, #12]
      break;
 8002f26:	e000      	b.n	8002f2a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8002f28:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fd6a 	bl	8003a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <HAL_TIM_PWM_Start_DMA+0x208>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d107      	bne.n	8002f52 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d007      	beq.n	8002f74 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	08003515 	.word	0x08003515
 8002f84:	08003585 	.word	0x08003585
 8002f88:	080034f1 	.word	0x080034f1
 8002f8c:	40010000 	.word	0x40010000

08002f90 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b0c      	cmp	r3, #12
 8002f9e:	d855      	bhi.n	800304c <HAL_TIM_PWM_Stop_DMA+0xbc>
 8002fa0:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	08002fdd 	.word	0x08002fdd
 8002fac:	0800304d 	.word	0x0800304d
 8002fb0:	0800304d 	.word	0x0800304d
 8002fb4:	0800304d 	.word	0x0800304d
 8002fb8:	08002ff9 	.word	0x08002ff9
 8002fbc:	0800304d 	.word	0x0800304d
 8002fc0:	0800304d 	.word	0x0800304d
 8002fc4:	0800304d 	.word	0x0800304d
 8002fc8:	08003015 	.word	0x08003015
 8002fcc:	0800304d 	.word	0x0800304d
 8002fd0:	0800304d 	.word	0x0800304d
 8002fd4:	0800304d 	.word	0x0800304d
 8002fd8:	08003031 	.word	0x08003031
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fe07 	bl	8001c04 <HAL_DMA_Abort_IT>
      break;
 8002ff6:	e02a      	b.n	800304e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003006:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe fdf9 	bl	8001c04 <HAL_DMA_Abort_IT>
      break;
 8003012:	e01c      	b.n	800304e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003022:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fdeb 	bl	8001c04 <HAL_DMA_Abort_IT>
      break;
 800302e:	e00e      	b.n	800304e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800303e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fddd 	bl	8001c04 <HAL_DMA_Abort_IT>
      break;
 800304a:	e000      	b.n	800304e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800304c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2200      	movs	r2, #0
 8003054:	6839      	ldr	r1, [r7, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fcd8 	bl	8003a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <HAL_TIM_PWM_Stop_DMA+0x148>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d117      	bne.n	8003096 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6a1a      	ldr	r2, [r3, #32]
 800306c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10f      	bne.n	8003096 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	f240 4344 	movw	r3, #1092	; 0x444
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <HAL_TIM_PWM_Stop_DMA+0x106>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	f241 1311 	movw	r3, #4369	; 0x1111
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <HAL_TIM_PWM_Stop_DMA+0x136>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	f240 4344 	movw	r3, #1092	; 0x444
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <HAL_TIM_PWM_Stop_DMA+0x136>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40010000 	.word	0x40010000

080030dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d122      	bne.n	8003138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d11b      	bne.n	8003138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0202 	mvn.w	r2, #2
 8003108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f9be 	bl	80034a0 <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f9b0 	bl	800348c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fd fddd 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b04      	cmp	r3, #4
 8003144:	d122      	bne.n	800318c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11b      	bne.n	800318c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0204 	mvn.w	r2, #4
 800315c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2202      	movs	r2, #2
 8003162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f994 	bl	80034a0 <HAL_TIM_IC_CaptureCallback>
 8003178:	e005      	b.n	8003186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f986 	bl	800348c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7fd fdb3 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b08      	cmp	r3, #8
 8003198:	d122      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0208 	mvn.w	r2, #8
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2204      	movs	r2, #4
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f96a 	bl	80034a0 <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f95c 	bl	800348c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fd fd89 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d122      	bne.n	8003234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d11b      	bne.n	8003234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0210 	mvn.w	r2, #16
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2208      	movs	r2, #8
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f940 	bl	80034a0 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f932 	bl	800348c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7fd fd5f 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d10e      	bne.n	8003260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d107      	bne.n	8003260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0201 	mvn.w	r2, #1
 8003258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f90c 	bl	8003478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b80      	cmp	r3, #128	; 0x80
 800326c:	d10e      	bne.n	800328c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b80      	cmp	r3, #128	; 0x80
 800327a:	d107      	bne.n	800328c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fcb0 	bl	8003bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d10e      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d107      	bne.n	80032b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f908 	bl	80034c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d10e      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d107      	bne.n	80032e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0220 	mvn.w	r2, #32
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fc7a 	bl	8003bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003302:	2302      	movs	r3, #2
 8003304:	e0b4      	b.n	8003470 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	f200 809f 	bhi.w	800345c <HAL_TIM_PWM_ConfigChannel+0x170>
 800331e:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	08003359 	.word	0x08003359
 8003328:	0800345d 	.word	0x0800345d
 800332c:	0800345d 	.word	0x0800345d
 8003330:	0800345d 	.word	0x0800345d
 8003334:	08003399 	.word	0x08003399
 8003338:	0800345d 	.word	0x0800345d
 800333c:	0800345d 	.word	0x0800345d
 8003340:	0800345d 	.word	0x0800345d
 8003344:	080033db 	.word	0x080033db
 8003348:	0800345d 	.word	0x0800345d
 800334c:	0800345d 	.word	0x0800345d
 8003350:	0800345d 	.word	0x0800345d
 8003354:	0800341b 	.word	0x0800341b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f9c8 	bl	80036f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6999      	ldr	r1, [r3, #24]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
      break;
 8003396:	e062      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fa0e 	bl	80037c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	021a      	lsls	r2, r3, #8
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	619a      	str	r2, [r3, #24]
      break;
 80033d8:	e041      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fa59 	bl	8003898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0208 	orr.w	r2, r2, #8
 80033f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0204 	bic.w	r2, r2, #4
 8003404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69d9      	ldr	r1, [r3, #28]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	61da      	str	r2, [r3, #28]
      break;
 8003418:	e021      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 faa3 	bl	800396c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69d9      	ldr	r1, [r3, #28]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	61da      	str	r2, [r3, #28]
      break;
 800345a:	e000      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800345c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f7ff ffe8 	bl	80034dc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d103      	bne.n	800353c <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	771a      	strb	r2, [r3, #28]
 800353a:	e019      	b.n	8003570 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d103      	bne.n	800354e <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2202      	movs	r2, #2
 800354a:	771a      	strb	r2, [r3, #28]
 800354c:	e010      	b.n	8003570 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	d103      	bne.n	8003560 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2204      	movs	r2, #4
 800355c:	771a      	strb	r2, [r3, #28]
 800355e:	e007      	b.n	8003570 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	429a      	cmp	r2, r3
 8003568:	d102      	bne.n	8003570 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2208      	movs	r2, #8
 800356e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7fd fbbb 	bl	8000cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	771a      	strb	r2, [r3, #28]
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d103      	bne.n	80035ac <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	771a      	strb	r2, [r3, #28]
 80035aa:	e019      	b.n	80035e0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d103      	bne.n	80035be <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2202      	movs	r2, #2
 80035ba:	771a      	strb	r2, [r3, #28]
 80035bc:	e010      	b.n	80035e0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d103      	bne.n	80035d0 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2204      	movs	r2, #4
 80035cc:	771a      	strb	r2, [r3, #28]
 80035ce:	e007      	b.n	80035e0 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d102      	bne.n	80035e0 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2208      	movs	r2, #8
 80035de:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff ff67 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <TIM_Base_SetConfig+0xe4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00f      	beq.n	800362c <TIM_Base_SetConfig+0x38>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003612:	d00b      	beq.n	800362c <TIM_Base_SetConfig+0x38>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a31      	ldr	r2, [pc, #196]	; (80036dc <TIM_Base_SetConfig+0xe8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d007      	beq.n	800362c <TIM_Base_SetConfig+0x38>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a30      	ldr	r2, [pc, #192]	; (80036e0 <TIM_Base_SetConfig+0xec>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_Base_SetConfig+0x38>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a2f      	ldr	r2, [pc, #188]	; (80036e4 <TIM_Base_SetConfig+0xf0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d108      	bne.n	800363e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a25      	ldr	r2, [pc, #148]	; (80036d8 <TIM_Base_SetConfig+0xe4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01b      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d017      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <TIM_Base_SetConfig+0xe8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <TIM_Base_SetConfig+0xec>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00f      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a20      	ldr	r2, [pc, #128]	; (80036e4 <TIM_Base_SetConfig+0xf0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <TIM_Base_SetConfig+0xf4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a1e      	ldr	r2, [pc, #120]	; (80036ec <TIM_Base_SetConfig+0xf8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <TIM_Base_SetConfig+0xfc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <TIM_Base_SetConfig+0xe4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d103      	bne.n	80036c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800

080036f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0201 	bic.w	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f023 0302 	bic.w	r3, r3, #2
 800373c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <TIM_OC1_SetConfig+0xc8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d10c      	bne.n	800376a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0308 	bic.w	r3, r3, #8
 8003756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a13      	ldr	r2, [pc, #76]	; (80037bc <TIM_OC1_SetConfig+0xc8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d111      	bne.n	8003796 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	621a      	str	r2, [r3, #32]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40010000 	.word	0x40010000

080037c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0210 	bic.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0320 	bic.w	r3, r3, #32
 800380a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <TIM_OC2_SetConfig+0xd4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10d      	bne.n	800383c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800383a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a15      	ldr	r2, [pc, #84]	; (8003894 <TIM_OC2_SetConfig+0xd4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d113      	bne.n	800386c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800384a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000

08003898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <TIM_OC3_SetConfig+0xd0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d10d      	bne.n	8003912 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <TIM_OC3_SetConfig+0xd0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d113      	bne.n	8003942 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	40010000 	.word	0x40010000

0800396c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	031b      	lsls	r3, r3, #12
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <TIM_OC4_SetConfig+0x9c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d109      	bne.n	80039e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	019b      	lsls	r3, r3, #6
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40010000 	.word	0x40010000

08003a0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2201      	movs	r2, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1a      	ldr	r2, [r3, #32]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e050      	b.n	8003b12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1c      	ldr	r2, [pc, #112]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abc:	d013      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a16      	ldr	r2, [pc, #88]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d10c      	bne.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40014000 	.word	0x40014000

08003b34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e03d      	b.n	8003bcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e03f      	b.n	8003c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fc2c 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fa55 	bl	80040f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10d      	bne.n	8003cee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_UART_IRQHandler+0x52>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f982 	bl	8003ff0 <UART_Receive_IT>
      return;
 8003cec:	e0d1      	b.n	8003e92 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80b0 	beq.w	8003e56 <HAL_UART_IRQHandler+0x1ba>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <HAL_UART_IRQHandler+0x70>
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 80a5 	beq.w	8003e56 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_UART_IRQHandler+0x90>
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_UART_IRQHandler+0xb0>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d44:	f043 0202 	orr.w	r2, r3, #2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_UART_IRQHandler+0xd0>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	f043 0204 	orr.w	r2, r3, #4
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00f      	beq.n	8003d96 <HAL_UART_IRQHandler+0xfa>
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d104      	bne.n	8003d8a <HAL_UART_IRQHandler+0xee>
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	f043 0208 	orr.w	r2, r3, #8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d078      	beq.n	8003e90 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_UART_IRQHandler+0x11c>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f91c 	bl	8003ff0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <HAL_UART_IRQHandler+0x144>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d031      	beq.n	8003e44 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f865 	bl	8003eb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b40      	cmp	r3, #64	; 0x40
 8003df2:	d123      	bne.n	8003e3c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e02:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e10:	4a21      	ldr	r2, [pc, #132]	; (8003e98 <HAL_UART_IRQHandler+0x1fc>)
 8003e12:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fd fef3 	bl	8001c04 <HAL_DMA_Abort_IT>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d016      	beq.n	8003e52 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e32:	e00e      	b.n	8003e52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f831 	bl	8003e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3a:	e00a      	b.n	8003e52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f82d 	bl	8003e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e42:	e006      	b.n	8003e52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f829 	bl	8003e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e50:	e01e      	b.n	8003e90 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e52:	bf00      	nop
    return;
 8003e54:	e01c      	b.n	8003e90 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1d6>
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f852 	bl	8003f14 <UART_Transmit_IT>
    return;
 8003e70:	e00f      	b.n	8003e92 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_UART_IRQHandler+0x1f6>
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d005      	beq.n	8003e92 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f89a 	bl	8003fc0 <UART_EndTransmit_IT>
    return;
 8003e8c:	bf00      	nop
 8003e8e:	e000      	b.n	8003e92 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003e90:	bf00      	nop
  }
}
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	08003eed 	.word	0x08003eed

08003e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ec6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff ffc8 	bl	8003e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b21      	cmp	r3, #33	; 0x21
 8003f26:	d144      	bne.n	8003fb2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f30:	d11a      	bne.n	8003f68 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f46:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	1c9a      	adds	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	621a      	str	r2, [r3, #32]
 8003f5a:	e00e      	b.n	8003f7a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	621a      	str	r2, [r3, #32]
 8003f66:	e008      	b.n	8003f7a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	1c59      	adds	r1, r3, #1
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6211      	str	r1, [r2, #32]
 8003f72:	781a      	ldrb	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4619      	mov	r1, r3
 8003f88:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e000      	b.n	8003fb4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fc fa77 	bl	80004d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b22      	cmp	r3, #34	; 0x22
 8004002:	d171      	bne.n	80040e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400c:	d123      	bne.n	8004056 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10e      	bne.n	800403a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	1c9a      	adds	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	629a      	str	r2, [r3, #40]	; 0x28
 8004038:	e029      	b.n	800408e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	b29b      	uxth	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28
 8004054:	e01b      	b.n	800408e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6858      	ldr	r0, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	1c59      	adds	r1, r3, #1
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6291      	str	r1, [r2, #40]	; 0x28
 800406e:	b2c2      	uxtb	r2, r0
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e00c      	b.n	800408e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	b2da      	uxtb	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	1c58      	adds	r0, r3, #1
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	6288      	str	r0, [r1, #40]	; 0x28
 8004086:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29b      	uxth	r3, r3
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4619      	mov	r1, r3
 800409c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d120      	bne.n	80040e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0220 	bic.w	r2, r2, #32
 80040b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695a      	ldr	r2, [r3, #20]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fc fa10 	bl	8000500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e002      	b.n	80040ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e000      	b.n	80040ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
  }
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004136:	f023 030c 	bic.w	r3, r3, #12
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	430b      	orrs	r3, r1
 8004142:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004162:	f040 818b 	bne.w	800447c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4ac1      	ldr	r2, [pc, #772]	; (8004470 <UART_SetConfig+0x37c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d005      	beq.n	800417c <UART_SetConfig+0x88>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4abf      	ldr	r2, [pc, #764]	; (8004474 <UART_SetConfig+0x380>)
 8004176:	4293      	cmp	r3, r2
 8004178:	f040 80bd 	bne.w	80042f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800417c:	f7fe fdc2 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 8004180:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	461d      	mov	r5, r3
 8004186:	f04f 0600 	mov.w	r6, #0
 800418a:	46a8      	mov	r8, r5
 800418c:	46b1      	mov	r9, r6
 800418e:	eb18 0308 	adds.w	r3, r8, r8
 8004192:	eb49 0409 	adc.w	r4, r9, r9
 8004196:	4698      	mov	r8, r3
 8004198:	46a1      	mov	r9, r4
 800419a:	eb18 0805 	adds.w	r8, r8, r5
 800419e:	eb49 0906 	adc.w	r9, r9, r6
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041b6:	4688      	mov	r8, r1
 80041b8:	4691      	mov	r9, r2
 80041ba:	eb18 0005 	adds.w	r0, r8, r5
 80041be:	eb49 0106 	adc.w	r1, r9, r6
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	461d      	mov	r5, r3
 80041c8:	f04f 0600 	mov.w	r6, #0
 80041cc:	196b      	adds	r3, r5, r5
 80041ce:	eb46 0406 	adc.w	r4, r6, r6
 80041d2:	461a      	mov	r2, r3
 80041d4:	4623      	mov	r3, r4
 80041d6:	f7fb fffd 	bl	80001d4 <__aeabi_uldivmod>
 80041da:	4603      	mov	r3, r0
 80041dc:	460c      	mov	r4, r1
 80041de:	461a      	mov	r2, r3
 80041e0:	4ba5      	ldr	r3, [pc, #660]	; (8004478 <UART_SetConfig+0x384>)
 80041e2:	fba3 2302 	umull	r2, r3, r3, r2
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	461d      	mov	r5, r3
 80041f0:	f04f 0600 	mov.w	r6, #0
 80041f4:	46a9      	mov	r9, r5
 80041f6:	46b2      	mov	sl, r6
 80041f8:	eb19 0309 	adds.w	r3, r9, r9
 80041fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004200:	4699      	mov	r9, r3
 8004202:	46a2      	mov	sl, r4
 8004204:	eb19 0905 	adds.w	r9, r9, r5
 8004208:	eb4a 0a06 	adc.w	sl, sl, r6
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004218:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800421c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004220:	4689      	mov	r9, r1
 8004222:	4692      	mov	sl, r2
 8004224:	eb19 0005 	adds.w	r0, r9, r5
 8004228:	eb4a 0106 	adc.w	r1, sl, r6
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	461d      	mov	r5, r3
 8004232:	f04f 0600 	mov.w	r6, #0
 8004236:	196b      	adds	r3, r5, r5
 8004238:	eb46 0406 	adc.w	r4, r6, r6
 800423c:	461a      	mov	r2, r3
 800423e:	4623      	mov	r3, r4
 8004240:	f7fb ffc8 	bl	80001d4 <__aeabi_uldivmod>
 8004244:	4603      	mov	r3, r0
 8004246:	460c      	mov	r4, r1
 8004248:	461a      	mov	r2, r3
 800424a:	4b8b      	ldr	r3, [pc, #556]	; (8004478 <UART_SetConfig+0x384>)
 800424c:	fba3 1302 	umull	r1, r3, r3, r2
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	2164      	movs	r1, #100	; 0x64
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	3332      	adds	r3, #50	; 0x32
 800425e:	4a86      	ldr	r2, [pc, #536]	; (8004478 <UART_SetConfig+0x384>)
 8004260:	fba2 2303 	umull	r2, r3, r2, r3
 8004264:	095b      	lsrs	r3, r3, #5
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800426c:	4498      	add	r8, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	461d      	mov	r5, r3
 8004272:	f04f 0600 	mov.w	r6, #0
 8004276:	46a9      	mov	r9, r5
 8004278:	46b2      	mov	sl, r6
 800427a:	eb19 0309 	adds.w	r3, r9, r9
 800427e:	eb4a 040a 	adc.w	r4, sl, sl
 8004282:	4699      	mov	r9, r3
 8004284:	46a2      	mov	sl, r4
 8004286:	eb19 0905 	adds.w	r9, r9, r5
 800428a:	eb4a 0a06 	adc.w	sl, sl, r6
 800428e:	f04f 0100 	mov.w	r1, #0
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800429a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800429e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042a2:	4689      	mov	r9, r1
 80042a4:	4692      	mov	sl, r2
 80042a6:	eb19 0005 	adds.w	r0, r9, r5
 80042aa:	eb4a 0106 	adc.w	r1, sl, r6
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	461d      	mov	r5, r3
 80042b4:	f04f 0600 	mov.w	r6, #0
 80042b8:	196b      	adds	r3, r5, r5
 80042ba:	eb46 0406 	adc.w	r4, r6, r6
 80042be:	461a      	mov	r2, r3
 80042c0:	4623      	mov	r3, r4
 80042c2:	f7fb ff87 	bl	80001d4 <__aeabi_uldivmod>
 80042c6:	4603      	mov	r3, r0
 80042c8:	460c      	mov	r4, r1
 80042ca:	461a      	mov	r2, r3
 80042cc:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <UART_SetConfig+0x384>)
 80042ce:	fba3 1302 	umull	r1, r3, r3, r2
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2164      	movs	r1, #100	; 0x64
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	3332      	adds	r3, #50	; 0x32
 80042e0:	4a65      	ldr	r2, [pc, #404]	; (8004478 <UART_SetConfig+0x384>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	f003 0207 	and.w	r2, r3, #7
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4442      	add	r2, r8
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	e26f      	b.n	80047d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042f6:	f7fe fcf1 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 80042fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	461d      	mov	r5, r3
 8004300:	f04f 0600 	mov.w	r6, #0
 8004304:	46a8      	mov	r8, r5
 8004306:	46b1      	mov	r9, r6
 8004308:	eb18 0308 	adds.w	r3, r8, r8
 800430c:	eb49 0409 	adc.w	r4, r9, r9
 8004310:	4698      	mov	r8, r3
 8004312:	46a1      	mov	r9, r4
 8004314:	eb18 0805 	adds.w	r8, r8, r5
 8004318:	eb49 0906 	adc.w	r9, r9, r6
 800431c:	f04f 0100 	mov.w	r1, #0
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004328:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800432c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004330:	4688      	mov	r8, r1
 8004332:	4691      	mov	r9, r2
 8004334:	eb18 0005 	adds.w	r0, r8, r5
 8004338:	eb49 0106 	adc.w	r1, r9, r6
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	461d      	mov	r5, r3
 8004342:	f04f 0600 	mov.w	r6, #0
 8004346:	196b      	adds	r3, r5, r5
 8004348:	eb46 0406 	adc.w	r4, r6, r6
 800434c:	461a      	mov	r2, r3
 800434e:	4623      	mov	r3, r4
 8004350:	f7fb ff40 	bl	80001d4 <__aeabi_uldivmod>
 8004354:	4603      	mov	r3, r0
 8004356:	460c      	mov	r4, r1
 8004358:	461a      	mov	r2, r3
 800435a:	4b47      	ldr	r3, [pc, #284]	; (8004478 <UART_SetConfig+0x384>)
 800435c:	fba3 2302 	umull	r2, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	461d      	mov	r5, r3
 800436a:	f04f 0600 	mov.w	r6, #0
 800436e:	46a9      	mov	r9, r5
 8004370:	46b2      	mov	sl, r6
 8004372:	eb19 0309 	adds.w	r3, r9, r9
 8004376:	eb4a 040a 	adc.w	r4, sl, sl
 800437a:	4699      	mov	r9, r3
 800437c:	46a2      	mov	sl, r4
 800437e:	eb19 0905 	adds.w	r9, r9, r5
 8004382:	eb4a 0a06 	adc.w	sl, sl, r6
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004392:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004396:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800439a:	4689      	mov	r9, r1
 800439c:	4692      	mov	sl, r2
 800439e:	eb19 0005 	adds.w	r0, r9, r5
 80043a2:	eb4a 0106 	adc.w	r1, sl, r6
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	461d      	mov	r5, r3
 80043ac:	f04f 0600 	mov.w	r6, #0
 80043b0:	196b      	adds	r3, r5, r5
 80043b2:	eb46 0406 	adc.w	r4, r6, r6
 80043b6:	461a      	mov	r2, r3
 80043b8:	4623      	mov	r3, r4
 80043ba:	f7fb ff0b 	bl	80001d4 <__aeabi_uldivmod>
 80043be:	4603      	mov	r3, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	461a      	mov	r2, r3
 80043c4:	4b2c      	ldr	r3, [pc, #176]	; (8004478 <UART_SetConfig+0x384>)
 80043c6:	fba3 1302 	umull	r1, r3, r3, r2
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2164      	movs	r1, #100	; 0x64
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	3332      	adds	r3, #50	; 0x32
 80043d8:	4a27      	ldr	r2, [pc, #156]	; (8004478 <UART_SetConfig+0x384>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043e6:	4498      	add	r8, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	461d      	mov	r5, r3
 80043ec:	f04f 0600 	mov.w	r6, #0
 80043f0:	46a9      	mov	r9, r5
 80043f2:	46b2      	mov	sl, r6
 80043f4:	eb19 0309 	adds.w	r3, r9, r9
 80043f8:	eb4a 040a 	adc.w	r4, sl, sl
 80043fc:	4699      	mov	r9, r3
 80043fe:	46a2      	mov	sl, r4
 8004400:	eb19 0905 	adds.w	r9, r9, r5
 8004404:	eb4a 0a06 	adc.w	sl, sl, r6
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004414:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004418:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800441c:	4689      	mov	r9, r1
 800441e:	4692      	mov	sl, r2
 8004420:	eb19 0005 	adds.w	r0, r9, r5
 8004424:	eb4a 0106 	adc.w	r1, sl, r6
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	461d      	mov	r5, r3
 800442e:	f04f 0600 	mov.w	r6, #0
 8004432:	196b      	adds	r3, r5, r5
 8004434:	eb46 0406 	adc.w	r4, r6, r6
 8004438:	461a      	mov	r2, r3
 800443a:	4623      	mov	r3, r4
 800443c:	f7fb feca 	bl	80001d4 <__aeabi_uldivmod>
 8004440:	4603      	mov	r3, r0
 8004442:	460c      	mov	r4, r1
 8004444:	461a      	mov	r2, r3
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <UART_SetConfig+0x384>)
 8004448:	fba3 1302 	umull	r1, r3, r3, r2
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	2164      	movs	r1, #100	; 0x64
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	3332      	adds	r3, #50	; 0x32
 800445a:	4a07      	ldr	r2, [pc, #28]	; (8004478 <UART_SetConfig+0x384>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	f003 0207 	and.w	r2, r3, #7
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4442      	add	r2, r8
 800446c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800446e:	e1b2      	b.n	80047d6 <UART_SetConfig+0x6e2>
 8004470:	40011000 	.word	0x40011000
 8004474:	40011400 	.word	0x40011400
 8004478:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4ad7      	ldr	r2, [pc, #860]	; (80047e0 <UART_SetConfig+0x6ec>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d005      	beq.n	8004492 <UART_SetConfig+0x39e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4ad6      	ldr	r2, [pc, #856]	; (80047e4 <UART_SetConfig+0x6f0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	f040 80d1 	bne.w	8004634 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004492:	f7fe fc37 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 8004496:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	469a      	mov	sl, r3
 800449c:	f04f 0b00 	mov.w	fp, #0
 80044a0:	46d0      	mov	r8, sl
 80044a2:	46d9      	mov	r9, fp
 80044a4:	eb18 0308 	adds.w	r3, r8, r8
 80044a8:	eb49 0409 	adc.w	r4, r9, r9
 80044ac:	4698      	mov	r8, r3
 80044ae:	46a1      	mov	r9, r4
 80044b0:	eb18 080a 	adds.w	r8, r8, sl
 80044b4:	eb49 090b 	adc.w	r9, r9, fp
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044cc:	4688      	mov	r8, r1
 80044ce:	4691      	mov	r9, r2
 80044d0:	eb1a 0508 	adds.w	r5, sl, r8
 80044d4:	eb4b 0609 	adc.w	r6, fp, r9
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	f04f 0400 	mov.w	r4, #0
 80044ea:	0094      	lsls	r4, r2, #2
 80044ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044f0:	008b      	lsls	r3, r1, #2
 80044f2:	461a      	mov	r2, r3
 80044f4:	4623      	mov	r3, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	4631      	mov	r1, r6
 80044fa:	f7fb fe6b 	bl	80001d4 <__aeabi_uldivmod>
 80044fe:	4603      	mov	r3, r0
 8004500:	460c      	mov	r4, r1
 8004502:	461a      	mov	r2, r3
 8004504:	4bb8      	ldr	r3, [pc, #736]	; (80047e8 <UART_SetConfig+0x6f4>)
 8004506:	fba3 2302 	umull	r2, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	469b      	mov	fp, r3
 8004514:	f04f 0c00 	mov.w	ip, #0
 8004518:	46d9      	mov	r9, fp
 800451a:	46e2      	mov	sl, ip
 800451c:	eb19 0309 	adds.w	r3, r9, r9
 8004520:	eb4a 040a 	adc.w	r4, sl, sl
 8004524:	4699      	mov	r9, r3
 8004526:	46a2      	mov	sl, r4
 8004528:	eb19 090b 	adds.w	r9, r9, fp
 800452c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800453c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004540:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004544:	4689      	mov	r9, r1
 8004546:	4692      	mov	sl, r2
 8004548:	eb1b 0509 	adds.w	r5, fp, r9
 800454c:	eb4c 060a 	adc.w	r6, ip, sl
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4619      	mov	r1, r3
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	f04f 0400 	mov.w	r4, #0
 8004562:	0094      	lsls	r4, r2, #2
 8004564:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004568:	008b      	lsls	r3, r1, #2
 800456a:	461a      	mov	r2, r3
 800456c:	4623      	mov	r3, r4
 800456e:	4628      	mov	r0, r5
 8004570:	4631      	mov	r1, r6
 8004572:	f7fb fe2f 	bl	80001d4 <__aeabi_uldivmod>
 8004576:	4603      	mov	r3, r0
 8004578:	460c      	mov	r4, r1
 800457a:	461a      	mov	r2, r3
 800457c:	4b9a      	ldr	r3, [pc, #616]	; (80047e8 <UART_SetConfig+0x6f4>)
 800457e:	fba3 1302 	umull	r1, r3, r3, r2
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	2164      	movs	r1, #100	; 0x64
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	3332      	adds	r3, #50	; 0x32
 8004590:	4a95      	ldr	r2, [pc, #596]	; (80047e8 <UART_SetConfig+0x6f4>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800459c:	4498      	add	r8, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	469b      	mov	fp, r3
 80045a2:	f04f 0c00 	mov.w	ip, #0
 80045a6:	46d9      	mov	r9, fp
 80045a8:	46e2      	mov	sl, ip
 80045aa:	eb19 0309 	adds.w	r3, r9, r9
 80045ae:	eb4a 040a 	adc.w	r4, sl, sl
 80045b2:	4699      	mov	r9, r3
 80045b4:	46a2      	mov	sl, r4
 80045b6:	eb19 090b 	adds.w	r9, r9, fp
 80045ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045be:	f04f 0100 	mov.w	r1, #0
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045d2:	4689      	mov	r9, r1
 80045d4:	4692      	mov	sl, r2
 80045d6:	eb1b 0509 	adds.w	r5, fp, r9
 80045da:	eb4c 060a 	adc.w	r6, ip, sl
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4619      	mov	r1, r3
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	f04f 0400 	mov.w	r4, #0
 80045f0:	0094      	lsls	r4, r2, #2
 80045f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045f6:	008b      	lsls	r3, r1, #2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4623      	mov	r3, r4
 80045fc:	4628      	mov	r0, r5
 80045fe:	4631      	mov	r1, r6
 8004600:	f7fb fde8 	bl	80001d4 <__aeabi_uldivmod>
 8004604:	4603      	mov	r3, r0
 8004606:	460c      	mov	r4, r1
 8004608:	461a      	mov	r2, r3
 800460a:	4b77      	ldr	r3, [pc, #476]	; (80047e8 <UART_SetConfig+0x6f4>)
 800460c:	fba3 1302 	umull	r1, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	2164      	movs	r1, #100	; 0x64
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	3332      	adds	r3, #50	; 0x32
 800461e:	4a72      	ldr	r2, [pc, #456]	; (80047e8 <UART_SetConfig+0x6f4>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	f003 020f 	and.w	r2, r3, #15
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4442      	add	r2, r8
 8004630:	609a      	str	r2, [r3, #8]
 8004632:	e0d0      	b.n	80047d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004634:	f7fe fb52 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8004638:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	469a      	mov	sl, r3
 800463e:	f04f 0b00 	mov.w	fp, #0
 8004642:	46d0      	mov	r8, sl
 8004644:	46d9      	mov	r9, fp
 8004646:	eb18 0308 	adds.w	r3, r8, r8
 800464a:	eb49 0409 	adc.w	r4, r9, r9
 800464e:	4698      	mov	r8, r3
 8004650:	46a1      	mov	r9, r4
 8004652:	eb18 080a 	adds.w	r8, r8, sl
 8004656:	eb49 090b 	adc.w	r9, r9, fp
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004666:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800466a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800466e:	4688      	mov	r8, r1
 8004670:	4691      	mov	r9, r2
 8004672:	eb1a 0508 	adds.w	r5, sl, r8
 8004676:	eb4b 0609 	adc.w	r6, fp, r9
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4619      	mov	r1, r3
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	0094      	lsls	r4, r2, #2
 800468e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004692:	008b      	lsls	r3, r1, #2
 8004694:	461a      	mov	r2, r3
 8004696:	4623      	mov	r3, r4
 8004698:	4628      	mov	r0, r5
 800469a:	4631      	mov	r1, r6
 800469c:	f7fb fd9a 	bl	80001d4 <__aeabi_uldivmod>
 80046a0:	4603      	mov	r3, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	461a      	mov	r2, r3
 80046a6:	4b50      	ldr	r3, [pc, #320]	; (80047e8 <UART_SetConfig+0x6f4>)
 80046a8:	fba3 2302 	umull	r2, r3, r3, r2
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	469b      	mov	fp, r3
 80046b6:	f04f 0c00 	mov.w	ip, #0
 80046ba:	46d9      	mov	r9, fp
 80046bc:	46e2      	mov	sl, ip
 80046be:	eb19 0309 	adds.w	r3, r9, r9
 80046c2:	eb4a 040a 	adc.w	r4, sl, sl
 80046c6:	4699      	mov	r9, r3
 80046c8:	46a2      	mov	sl, r4
 80046ca:	eb19 090b 	adds.w	r9, r9, fp
 80046ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046e6:	4689      	mov	r9, r1
 80046e8:	4692      	mov	sl, r2
 80046ea:	eb1b 0509 	adds.w	r5, fp, r9
 80046ee:	eb4c 060a 	adc.w	r6, ip, sl
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4619      	mov	r1, r3
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	f04f 0400 	mov.w	r4, #0
 8004704:	0094      	lsls	r4, r2, #2
 8004706:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800470a:	008b      	lsls	r3, r1, #2
 800470c:	461a      	mov	r2, r3
 800470e:	4623      	mov	r3, r4
 8004710:	4628      	mov	r0, r5
 8004712:	4631      	mov	r1, r6
 8004714:	f7fb fd5e 	bl	80001d4 <__aeabi_uldivmod>
 8004718:	4603      	mov	r3, r0
 800471a:	460c      	mov	r4, r1
 800471c:	461a      	mov	r2, r3
 800471e:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <UART_SetConfig+0x6f4>)
 8004720:	fba3 1302 	umull	r1, r3, r3, r2
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	2164      	movs	r1, #100	; 0x64
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	3332      	adds	r3, #50	; 0x32
 8004732:	4a2d      	ldr	r2, [pc, #180]	; (80047e8 <UART_SetConfig+0x6f4>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473e:	4498      	add	r8, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	469b      	mov	fp, r3
 8004744:	f04f 0c00 	mov.w	ip, #0
 8004748:	46d9      	mov	r9, fp
 800474a:	46e2      	mov	sl, ip
 800474c:	eb19 0309 	adds.w	r3, r9, r9
 8004750:	eb4a 040a 	adc.w	r4, sl, sl
 8004754:	4699      	mov	r9, r3
 8004756:	46a2      	mov	sl, r4
 8004758:	eb19 090b 	adds.w	r9, r9, fp
 800475c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800476c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004770:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004774:	4689      	mov	r9, r1
 8004776:	4692      	mov	sl, r2
 8004778:	eb1b 0509 	adds.w	r5, fp, r9
 800477c:	eb4c 060a 	adc.w	r6, ip, sl
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4619      	mov	r1, r3
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	f04f 0400 	mov.w	r4, #0
 8004792:	0094      	lsls	r4, r2, #2
 8004794:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004798:	008b      	lsls	r3, r1, #2
 800479a:	461a      	mov	r2, r3
 800479c:	4623      	mov	r3, r4
 800479e:	4628      	mov	r0, r5
 80047a0:	4631      	mov	r1, r6
 80047a2:	f7fb fd17 	bl	80001d4 <__aeabi_uldivmod>
 80047a6:	4603      	mov	r3, r0
 80047a8:	460c      	mov	r4, r1
 80047aa:	461a      	mov	r2, r3
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <UART_SetConfig+0x6f4>)
 80047ae:	fba3 1302 	umull	r1, r3, r3, r2
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2164      	movs	r1, #100	; 0x64
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	3332      	adds	r3, #50	; 0x32
 80047c0:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <UART_SetConfig+0x6f4>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 020f 	and.w	r2, r3, #15
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4442      	add	r2, r8
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	e7ff      	b.n	80047d6 <UART_SetConfig+0x6e2>
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e0:	40011000 	.word	0x40011000
 80047e4:	40011400 	.word	0x40011400
 80047e8:	51eb851f 	.word	0x51eb851f

080047ec <__libc_init_array>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	4e0d      	ldr	r6, [pc, #52]	; (8004824 <__libc_init_array+0x38>)
 80047f0:	4c0d      	ldr	r4, [pc, #52]	; (8004828 <__libc_init_array+0x3c>)
 80047f2:	1ba4      	subs	r4, r4, r6
 80047f4:	10a4      	asrs	r4, r4, #2
 80047f6:	2500      	movs	r5, #0
 80047f8:	42a5      	cmp	r5, r4
 80047fa:	d109      	bne.n	8004810 <__libc_init_array+0x24>
 80047fc:	4e0b      	ldr	r6, [pc, #44]	; (800482c <__libc_init_array+0x40>)
 80047fe:	4c0c      	ldr	r4, [pc, #48]	; (8004830 <__libc_init_array+0x44>)
 8004800:	f000 f820 	bl	8004844 <_init>
 8004804:	1ba4      	subs	r4, r4, r6
 8004806:	10a4      	asrs	r4, r4, #2
 8004808:	2500      	movs	r5, #0
 800480a:	42a5      	cmp	r5, r4
 800480c:	d105      	bne.n	800481a <__libc_init_array+0x2e>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004814:	4798      	blx	r3
 8004816:	3501      	adds	r5, #1
 8004818:	e7ee      	b.n	80047f8 <__libc_init_array+0xc>
 800481a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800481e:	4798      	blx	r3
 8004820:	3501      	adds	r5, #1
 8004822:	e7f2      	b.n	800480a <__libc_init_array+0x1e>
 8004824:	08004884 	.word	0x08004884
 8004828:	08004884 	.word	0x08004884
 800482c:	08004884 	.word	0x08004884
 8004830:	08004888 	.word	0x08004888

08004834 <memset>:
 8004834:	4402      	add	r2, r0
 8004836:	4603      	mov	r3, r0
 8004838:	4293      	cmp	r3, r2
 800483a:	d100      	bne.n	800483e <memset+0xa>
 800483c:	4770      	bx	lr
 800483e:	f803 1b01 	strb.w	r1, [r3], #1
 8004842:	e7f9      	b.n	8004838 <memset+0x4>

08004844 <_init>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	bf00      	nop
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr

08004850 <_fini>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr
